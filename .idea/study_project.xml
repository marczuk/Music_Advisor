<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="14" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <HyperskillCourse>
          <option name="authors">
            <list />
          </option>
          <option name="courseMode" value="Study" />
          <option name="customPresentableName" />
          <option name="description" value="Modern world spoils us with a wide variety of music: pop-lovers, rockers, rappers and club enthusiasts alike face a nearly infinite choice. Fortunately, there are programs that can help us find something we like and not get lost in this variety: in this project, you will write a program like this. Create a personal music advisor that makes preference-based suggestions and even shares links to new releases and featured playlists. Together with Spotify, your music advisor will be a powerful guide to the world of music.&lt;br/&gt;&lt;br/&gt;Learn more at &lt;a href=&quot;https://hyperskill.org&quot;&gt;https://hyperskill.org/projects/62&lt;/a&gt;" />
          <option name="environment" value="" />
          <option name="fromZip" value="false" />
          <option name="id" value="0" />
          <option name="index" value="-1" />
          <option name="language" value="JAVA 11" />
          <option name="languageCode" value="en" />
          <option name="name" value="Music Advisor" />
          <option name="stages">
            <list>
              <HyperskillStage>
                <option name="id" value="335" />
                <option name="stepId" value="5477" />
                <option name="title" value="Strings and fiddlesticks" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="336" />
                <option name="stepId" value="5478" />
                <option name="title" value="Rocking OAuth" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="337" />
                <option name="stepId" value="5479" />
                <option name="title" value="Useful connections" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="338" />
                <option name="stepId" value="5480" />
                <option name="title" value="Processing links" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="339" />
                <option name="stepId" value="5481" />
                <option name="title" value="Final chords" />
              </HyperskillStage>
            </list>
          </option>
          <option name="stepikChangeStatus" value="Up to date" />
          <option name="taskToTopics">
            <map>
              <entry key="0">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="259" />
                      <option name="theoryId" value="3805" />
                      <option name="title" value="IDE" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="15" />
                      <option name="theoryId" value="3500" />
                      <option name="title" value="Introduction to Java" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="147" />
                      <option name="theoryId" value="3522" />
                      <option name="title" value="Basic literals" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="148" />
                      <option name="theoryId" value="3521" />
                      <option name="title" value="The first program" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="193" />
                      <option name="theoryId" value="3749" />
                      <option name="title" value="Printing data" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="14" />
                      <option name="theoryId" value="3518" />
                      <option name="title" value="Types and variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="309" />
                      <option name="theoryId" value="5035" />
                      <option name="title" value="Primitive and reference types" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="1">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="117" />
                      <option name="theoryId" value="3614" />
                      <option name="title" value="Introduction to OOP" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="161" />
                      <option name="theoryId" value="3532" />
                      <option name="title" value="Sizes and ranges" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="32" />
                      <option name="theoryId" value="3510" />
                      <option name="title" value="Type casting" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="33" />
                      <option name="theoryId" value="3504" />
                      <option name="title" value="Switch statement" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="152" />
                      <option name="theoryId" value="3506" />
                      <option name="title" value="Ternary operator" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="94" />
                      <option name="theoryId" value="3590" />
                      <option name="title" value="Defining methods" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="115" />
                      <option name="theoryId" value="3618" />
                      <option name="title" value="Defining classes" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="7" />
                      <option name="theoryId" value="3621" />
                      <option name="title" value="Package" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="17" />
                      <option name="theoryId" value="3535" />
                      <option name="title" value="Constructor" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="2">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="157" />
                      <option name="theoryId" value="3611" />
                      <option name="title" value="The concept of patterns" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="323" />
                      <option name="theoryId" value="5216" />
                      <option name="title" value="Decorator" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="37" />
                      <option name="theoryId" value="3525" />
                      <option name="title" value="Overloading" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="28" />
                      <option name="theoryId" value="3589" />
                      <option name="title" value="Access modifiers" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="24" />
                      <option name="theoryId" value="3599" />
                      <option name="title" value="Getters and setters" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="38" />
                      <option name="theoryId" value="3534" />
                      <option name="title" value="Static members" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="120" />
                      <option name="theoryId" value="3538" />
                      <option name="title" value="Multiple constructors" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="121" />
                      <option name="theoryId" value="3533" />
                      <option name="title" value="Initialization blocks" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="8" />
                      <option name="theoryId" value="3583" />
                      <option name="title" value="Inheritance" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="127" />
                      <option name="theoryId" value="3588" />
                      <option name="title" value="The keyword super" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="5" />
                      <option name="theoryId" value="3572" />
                      <option name="title" value="Hiding and overriding" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="128" />
                      <option name="theoryId" value="3585" />
                      <option name="title" value="Referencing subclass objects" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="3">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="60" />
                      <option name="theoryId" value="3497" />
                      <option name="title" value="What is an exception" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="167" />
                      <option name="theoryId" value="3492" />
                      <option name="title" value="Generic programming" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="168" />
                      <option name="theoryId" value="3493" />
                      <option name="title" value="Generics and Object" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="170" />
                      <option name="theoryId" value="3606" />
                      <option name="title" value="Generic methods" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="83" />
                      <option name="theoryId" value="3559" />
                      <option name="title" value="Type Bounds" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="85" />
                      <option name="theoryId" value="3524" />
                      <option name="title" value="Wildcards" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="80" />
                      <option name="theoryId" value="3562" />
                      <option name="title" value="Generics and Reflection" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="82" />
                      <option name="theoryId" value="3561" />
                      <option name="title" value="Reification" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="84" />
                      <option name="theoryId" value="3560" />
                      <option name="title" value="Type Erasure" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="163" />
                      <option name="theoryId" value="3536" />
                      <option name="title" value="Errors in programs" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="6" />
                      <option name="theoryId" value="3595" />
                      <option name="title" value="Boxing &amp;&amp; unboxing" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="4">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="156" />
                      <option name="theoryId" value="3555" />
                      <option name="title" value="Singleton" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="159" />
                      <option name="theoryId" value="3556" />
                      <option name="title" value="Strategy" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="160" />
                      <option name="theoryId" value="3577" />
                      <option name="title" value="Encapsulating object creation" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
            </map>
          </option>
          <option name="updateDate" value="0" />
          <option name="hyperskillProject">
            <HyperskillProject>
              <option name="description" value="Modern world spoils us with a wide variety of music: pop-lovers, rockers, rappers and club enthusiasts alike face a nearly infinite choice. Fortunately, there are programs that can help us find something we like and not get lost in this variety: in this project, you will write a program like this. Create a personal music advisor that makes preference-based suggestions and even shares links to new releases and featured playlists. Together with Spotify, your music advisor will be a powerful guide to the world of music." />
              <option name="id" value="62" />
              <option name="ideFiles" value="https://stepik.org/media/attachments/lesson/210107/additional_files.json" />
              <option name="language" value="java" />
              <option name="title" value="Music Advisor" />
              <option name="useIde" value="true" />
            </HyperskillProject>
          </option>
          <option name="items">
            <list>
              <FrameworkLesson>
                <option name="currentTaskIndex" value="3" />
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="Music Advisor" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Often, when developing your web applications, it can be useful to implement the ability to register users using third-party services (such as Twitter, Facebook, Google, etc.), as well as the ability to interact with these services (for example, use Twitter to publish a post, or getting a list of friends on Facebook). To implement this functionality, you need to learn how to work with the service’s API. Most services use REST (Representational State Transfer) to provide the ability to interact with the service. To learn how to work with it from Java, we will develop a simple application that will offer us music using Spotify.&lt;br&gt;&#10;  &lt;br&gt;&#10;  First, in this stage, you have to implement simple functionality to read user input and provide information at the user's request.&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;  &lt;li&gt;&lt;code&gt;featured&lt;/code&gt; - list of Spotify featured playlists with their links fetched from API;&lt;/li&gt;&#10;  &lt;li&gt;&lt;code&gt;new&lt;/code&gt; - list of new albums with artists and links on Spotify;&lt;/li&gt;&#10;  &lt;li&gt;&lt;code&gt;categories&lt;/code&gt; - list of all available categories on Spotify (just their names);&lt;/li&gt;&#10;  &lt;li&gt;&lt;code&gt;playlists C_NAME&lt;/code&gt;,  where C_NAME – name of category. List contains playlists of this category and their links on Spotify;&lt;/li&gt;&#10;  &lt;li&gt;&lt;code&gt;exit&lt;/code&gt; - shut down application&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;Notice, that here you don’t need to implement full realization of interaction with API (you will do that later), just replace it with simple strings.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Below is an output example of the described program. Try to output all cases like in the example.&lt;/p&gt;&#10;&#10;&lt;p&gt;The lines that start with &lt;code&gt;&amp;gt;&lt;/code&gt; represent the user input.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;&amp;gt; new&#10;---NEW RELEASES---&#10;Mountains [Sia, Diplo, Labrinth]&#10;Runaway [Lil Peep]&#10;The Greatest Show [Panic! At The Disco]&#10;All Out Life [Slipknot]&#10;&amp;gt; featured&#10;---FEATURED---&#10;Mellow Morning&#10;Wake Up and Smell the Coffee&#10;Monday Motivation&#10;Songs to Sing in the Shower&#10;&amp;gt; categories&#10;---CATEGORIES---&#10;Top Lists&#10;Pop&#10;Mood&#10;Latin&#10;&amp;gt; playlists Mood&#10;---MOOD PLAYLISTS---&#10;Walk Like A Badass  &#10;Rage Beats  &#10;Arab Mood Booster  &#10;Sunday Stroll&#10;&amp;gt; exit&#10;---GOODBYE!---&lt;/code&gt;&lt;/pre&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/62/stages/335/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5477" />
                      <option name="index" value="1" />
                      <option name="name" value="Strings and fiddlesticks" />
                      <option name="record" value="2" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/advisor/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/Main.java" />
                                <option name="text" value="package advisor;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/MusicAdvisorTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/MusicAdvisorTest.java" />
                                <option name="text" value="import advisor.Main;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;&#10;import java.util.List;&#10;&#10;public class MusicAdvisorTest extends BaseStageTest {&#10;    public MusicAdvisorTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&gt; generate() {&#10;        return List.of(&#10;            new TestCase()&#10;                .setInput(&#10;                    &quot;new\n&quot; +&#10;                    &quot;featured\n&quot; +&#10;                    &quot;categories\n&quot; +&#10;                    &quot;playlists Mood\n&quot; +&#10;                    &quot;exit&quot;)&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, Object clue) {&#10;        return new CheckResult(&#10;            reply.contains(&quot;---NEW RELEASES---&quot;)&#10;            &amp;&amp; reply.contains(&quot;---FEATURED---&quot;)&#10;            &amp;&amp; reply.contains(&quot;---CATEGORIES---&quot;)&#10;            &amp;&amp; reply.contains(&quot;---GOODBYE!---&quot;)&#10;            &amp;&amp; reply.contains(&quot;PLAYLISTS---&quot;));&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="build.gradle">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="build.gradle" />
                                <option name="text" value="apply plugin: 'java'&#10;apply plugin: 'application'&#10;&#10;group 'advisor'&#10;version '1.0-SNAPSHOT'&#10;&#10;sourceCompatibility = 11&#10;mainClassName = 'advisor.Main'&#10;&#10;repositories {&#10;    mavenCentral()&#10;}&#10;&#10;dependencies {&#10;    compile 'com.google.code.gson:gson:+'&#10;}&#10;&#10;jar {&#10;    manifest {&#10;        attributes 'Main-Class' : 'advisor.Main'&#10;    }&#10;    from {&#10;        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1561937178000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;You have written the simulation of the final application, and now we will make it fully functional, step by step. In this stage, we will introduce OAuth basics.&lt;/p&gt;&#10;&#10;&lt;p&gt;OAuth means protocol for authorization. Usually, when you are visiting a website and it allows you to register, you often have an option to sign in with Google, Twitter, Facebook, or another service. All these services use OAuth to provide user information to third-party applications.&lt;br&gt;&#10;  &lt;br&gt;&#10;  The main entity of OAuth is &lt;code&gt;access_token&lt;/code&gt;, the secret code that should be sent with an HTTP request to API, so that service will be sure that you have enough rights to get information from API.&lt;/p&gt;&#10;&#10;&lt;p&gt;So, before an application can receive &lt;code&gt;access_token&lt;/code&gt;, the user should confirm access to that application. Let’s see how it works:&lt;/p&gt;&#10;&#10;&lt;ol&gt;&#10;  &lt;li&gt;A developer of an application wants to use an API (Spotify in our case), so he must go to the site of the corresponding API and create his application there to get &lt;code&gt;client_id&lt;/code&gt; and &lt;code&gt;client_secret&lt;/code&gt;.&lt;/li&gt;&#10;  &lt;li&gt;After he has registered the application and received the &lt;code&gt;client_id&lt;/code&gt; and &lt;code&gt;client_secret&lt;/code&gt;, he must create an authorization link which will contain, in query parameters, the &lt;code&gt;client_id&lt;/code&gt;, &lt;code&gt;redirect_uri&lt;/code&gt; (where the user will be sent after confirm; the &lt;code&gt;redirect_uri&lt;/code&gt; itself must be allowed in the settings of the application), &lt;code&gt;response_type&lt;/code&gt; (what should be returned if success) and scopes (what rights the user must provide to his account; in our case we won’t use scopes).&lt;/li&gt;&#10;  &lt;li&gt;The user follows this link and authorizes access (clicks the “allow” button), and is redirected back to the developer’s specified &lt;code&gt;redirect_uri&lt;/code&gt; with the response here.&lt;/li&gt;&#10;  &lt;li&gt;The developer uses this response to get &lt;code&gt;access_token&lt;/code&gt;.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;&lt;p&gt;You can find more information about OAuth &lt;a href=&quot;https://www.youtube.com/watch?v=CPbvxxslDTU&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt;&lt;br&gt;&#10;  In our case, using the Spotify API, it will look like this:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;https://accounts.spotify.com/authorize?client_id=YOURCLIENT&amp;amp;redirect_uri=https://www.example.com&amp;amp;response_type=code&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;ol&gt;&#10;  &lt;li&gt;The user follows this link and confirms access.&lt;/li&gt;&#10;  &lt;li&gt;Then he is redirected to redirect_uri with the response in the URL (&lt;code&gt;http://www.example.com?code=7angkqw2DAsdfkQ&lt;/code&gt;).&lt;/li&gt;&#10;  &lt;li&gt;You are using this code to get access_token and make requests to an API.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;&lt;p&gt;You can find more information &lt;a href=&quot;https://developer.spotify.com/documentation/general/guides/authorization-guide/&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;So, in this stage, you must go to the Spotify Web site for developers (&lt;a href=&quot;https://developer.spotify.com/&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developer.spotify.com/&lt;/a&gt;) and create your application.&lt;/p&gt;&#10;&#10;&lt;p&gt;Add one more command to the app: an auth command that will print the auth link and allows us to use another command (no authorization required, just print workable link and make some Boolean field true).&lt;/p&gt;&#10;&#10;&lt;p&gt;Make commands unavailable if user access for the application is not confirmed (in this stage if he did not call the auth command).&lt;/p&gt;&#10;&#10;&lt;p&gt;Remember that you should add your &lt;code&gt;redirect_uri&lt;/code&gt; in the settings of your application.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Below is an output example of the described program. Try to output all cases like in the example.&lt;br&gt;&#10;  The lines that start with &lt;code&gt;&amp;gt;&lt;/code&gt; represent the user input.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;&amp;gt; new&#10;Please, provide access for application.&#10;&amp;gt; featured&#10;Please, provide access for application.&#10;&amp;gt; auth&#10;https://accounts.spotify.com/authorize?client_id=a19ee7dbfda443b2a8150c9101bfd645&amp;amp;redirect_uri=http://localhost:8765&amp;amp;response_type=code&#10;---SUCCESS---&#10;&amp;gt; new&#10;---NEW RELEASES---&#10;Mountains [Sia, Diplo, Labrinth]&#10;Runaway [Lil Peep]&#10;The Greatest Show [Panic! At The Disco]&#10;All Out Life [Slipknot]&#10;&amp;gt; exit&#10;---GOODBYE!---&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/62/stages/336/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5478" />
                      <option name="index" value="2" />
                      <option name="name" value="Rocking OAuth" />
                      <option name="record" value="1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="test/MusicAdvisorTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/MusicAdvisorTest.java" />
                                <option name="text" value="import advisor.Main;&#10;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;&#10;import java.util.List;&#10;import java.util.function.Function;&#10;&#10;class Attach {&#10;    Function&lt;String, CheckResult&gt; func;&#10;&#10;    Attach(Function&lt;String, CheckResult&gt; func) {&#10;        this.func = func;&#10;    }&#10;}&#10;&#10;public class MusicAdvisorTest extends BaseStageTest&lt;Attach&gt; {&#10;    public MusicAdvisorTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;Attach&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;                    if (!reply.contains(&quot;---SUCCESS---&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;There is no \&quot;---SUCCESS---\&quot; after \&quot;auth\&quot; but should be&quot;);&#10;                    }&#10;                    if (!reply.contains(&quot;https://accounts.spotify.com/authorize?&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;There is no link after \&quot;auth\&quot; but should be&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;new\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;                    if (!reply.strip().startsWith(&quot;Please, provide access for application.&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;When no access provided you should output &quot; +&#10;                                &quot;\&quot;Please, provide access for application.\&quot;&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;featured\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;                    if (!reply.strip().startsWith(&quot;Please, provide access for application.&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;When no access provided you should output &quot; +&#10;                                &quot;\&quot;Please, provide access for application.\&quot;&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\nnew\nfeatured\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;                    if (!reply.contains(&quot;---NEW RELEASES---&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;When \&quot;new\&quot; was inputted there should be \&quot;---NEW RELEASES---\&quot; line&quot;);&#10;                    }&#10;                    if (!reply.contains(&quot;---FEATURED---&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;When \&quot;featured\&quot; was inputted there should be \&quot;---FEATURED---\&quot; line&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                }))&#10;&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, Attach clue) {&#10;        return clue.func.apply(reply);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/Main.java" />
                                <option name="text" value="package advisor;&#10;&#10;import advisor.manager.CommandManager;&#10;&#10;import java.util.Scanner;&#10;&#10;public class Main {&#10;&#10;    CommandManager commandManager;&#10;&#10;    public Main() {&#10;        Scanner scanner = new Scanner(System.in);&#10;        this.commandManager = new CommandManager(scanner);&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        Main application = new Main();&#10;        application.start();&#10;    }&#10;&#10;    public void start() {&#10;        commandManager.executeLine();&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="build.gradle">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="build.gradle" />
                                <option name="text" value="apply plugin: 'java'&#10;apply plugin: 'application'&#10;&#10;group 'advisor'&#10;version '1.0-SNAPSHOT'&#10;&#10;sourceCompatibility = 11&#10;mainClassName = 'advisor.Main'&#10;&#10;repositories {&#10;    mavenCentral()&#10;}&#10;&#10;dependencies {&#10;    compile 'com.google.code.gson:gson:+'&#10;}&#10;&#10;jar {&#10;    manifest {&#10;        attributes 'Main-Class' : 'advisor.Main'&#10;    }&#10;    from {&#10;        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/manager/CommandManager.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/manager/CommandManager.java" />
                                <option name="text" value="package advisor.manager;&#10;&#10;import advisor.command.Command;&#10;import advisor.command.CommandFactory;&#10;import advisor.exception.InvalidInputException;&#10;&#10;import java.util.Scanner;&#10;&#10;public class CommandManager {&#10;&#10;    CommandFactory commandFactory;&#10;    Scanner scanner;&#10;    boolean getNextLine = true;&#10;&#10;    public CommandManager(Scanner scanner) {&#10;        this.scanner = scanner;&#10;        this.commandFactory = new CommandFactory();&#10;    }&#10;&#10;    public void executeLine()&#10;    {&#10;        String nextLine = getNextLine();&#10;        if (!nextLine.isEmpty()) {&#10;&#10;            try {&#10;                startCommand(nextLine);&#10;            } catch (Exception e) {&#10;                System.out.println(e.getMessage());&#10;&#10;            }&#10;        }&#10;&#10;        if (getNextLine) {&#10;            executeLine();&#10;        }&#10;    }&#10;&#10;    private void startCommand(String line) throws InvalidInputException {&#10;        Command command = commandFactory.getCommand(line);&#10;        command.handle();&#10;&#10;        if (command.isExitCommand()) {&#10;            getNextLine = false;&#10;        }&#10;    }&#10;&#10;    private String getNextLine() {&#10;        return scanner.nextLine();&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/HelpCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/HelpCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class HelpCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String helpMessage = &quot;The program calculates the sum of numbers //n - calculator support the addition + and subtraction - operators&quot;;&#10;&#10;    @Override&#10;    public void handle() {&#10;        System.out.println(helpMessage);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/Command.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/Command.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public abstract class Command {&#10;&#10;    protected boolean exitCommand = false;&#10;&#10;    public abstract void handle();&#10;&#10;//    public static String getName() {&#10;//        return name;&#10;//    }&#10;&#10;    public boolean isExitCommand() {&#10;        return exitCommand;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/ExitCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/ExitCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class ExitCommand extends Command{&#10;&#10;    public ExitCommand() {&#10;        this.exitCommand = true;&#10;    }&#10;&#10;    @Override&#10;    public void handle() {&#10;        System.out.println(&quot;---GOODBYE!---&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/CommandFactory.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/CommandFactory.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;import advisor.exception.InvalidInputException;&#10;&#10;public class CommandFactory {&#10;&#10;    private final String unknownMessage = &quot;Unknown command&quot;;&#10;    private final String missingParameterMessage = &quot;Missing Parameter&quot;;&#10;&#10;    private final String playlistsCommand = &quot;playlists&quot;;&#10;    private final String newCommand = &quot;new&quot;;&#10;    private final String featuredCommand = &quot;featured&quot;;&#10;    private final String categoriesCommand = &quot;categories&quot;;&#10;    private final String helpCommand = &quot;help&quot;;&#10;    private final String stopCommand = &quot;exit&quot;;&#10;&#10;    public Command getCommand(String commandLine) throws InvalidInputException {&#10;&#10;        String[] parts = commandLine.split(&quot;\\s&quot;, 2);&#10;        String textCommand = parts[0];&#10;&#10;        String parameters = null;&#10;        if (parts.length &gt; 1 ) {&#10;            parameters = parts[1];&#10;        }&#10;&#10;        Command command;&#10;        if (textCommand.equals(helpCommand)){&#10;            command = new HelpCommand();&#10;        }&#10;        else if (textCommand.equals(stopCommand)){&#10;            command = new ExitCommand();&#10;        }&#10;        else if (textCommand.equals(featuredCommand)){&#10;            command = new FeaturedCommand();&#10;        }&#10;        else if (textCommand.equals(newCommand)){&#10;            command = new NewCommand();&#10;        }&#10;        else if (textCommand.equals(categoriesCommand)){&#10;            command = new CategoriesCommand();&#10;        }&#10;        else if (textCommand.equals(playlistsCommand)){&#10;            if (parameters == null) {&#10;                throw new InvalidInputException(missingParameterMessage);&#10;            }&#10;            command = new PlaylistsCommand(parameters);&#10;        }&#10;        else {&#10;            throw new InvalidInputException(unknownMessage + &quot; &quot; + textCommand);&#10;        }&#10;&#10;&#10;        return command;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/exception/InvalidInputException.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/exception/InvalidInputException.java" />
                                <option name="text" value="package advisor.exception;&#10;&#10;public class InvalidInputException extends Exception {&#10;&#10;    public InvalidInputException(String errorMessage) {&#10;        super(errorMessage);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/FeaturedCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/FeaturedCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class FeaturedCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String title = &quot;---FEATURED---&quot;;&#10;    private String message = &quot;Mellow Morning\n&quot; +&#10;            &quot;Wake Up and Smell the Coffee\n&quot; +&#10;            &quot;Monday Motivation\n&quot; +&#10;            &quot;Songs to Sing in the Shower&quot;;&#10;&#10;    @Override&#10;    public void handle() {&#10;&#10;        System.out.println(title);&#10;&#10;        System.out.println(message);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/NewCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/NewCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class NewCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String title = &quot;---NEW RELEASES---&quot;;&#10;    private String message = &quot;Mountains [Sia, Diplo, Labrinth]\n&quot; +&#10;            &quot;Runaway [Lil Peep]\n&quot; +&#10;            &quot;The Greatest Show [Panic! At The Disco]\n&quot; +&#10;            &quot;All Out Life [Slipknot]&quot;;&#10;&#10;    @Override&#10;    public void handle() {&#10;&#10;        System.out.println(title);&#10;        System.out.println(message);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/CategoriesCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/CategoriesCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class CategoriesCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String title = &quot;---CATEGORIES---&quot;;&#10;    private String message =  &quot;Top Lists\n&quot; +&#10;            &quot;Pop\n&quot; +&#10;            &quot;Mood\n&quot; +&#10;            &quot;Latin&quot;;&#10;&#10;    @Override&#10;    public void handle() {&#10;&#10;        System.out.println(title);&#10;        System.out.println(message);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/PlaylistsCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/PlaylistsCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class PlaylistsCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String categoryName;&#10;&#10;    private String title = &quot;---C_NAME PLAYLISTS---&quot;;&#10;    private String message =  &quot;Mountains [Sia, Diplo, Labrinth]\n&quot; +&#10;            &quot;Runaway [Lil Peep]\n&quot; +&#10;            &quot;The Greatest Show [Panic! At The Disco]\n&quot; +&#10;            &quot;All Out Life [Slipknot]&quot;;&#10;&#10;&#10;    public PlaylistsCommand(String parametersString) {&#10;        this.categoryName = parametersString;&#10;        title = title.replaceAll(&quot;C_NAME&quot;, this.categoryName.toUpperCase());&#10;    }&#10;&#10;    @Override&#10;    public void handle() {&#10;&#10;        System.out.println(title);&#10;        System.out.println(message);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/resources/config.properties">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/resources/config.properties" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/AuthCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/AuthCommand.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/service/SpotifyService.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/service/SpotifyService.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/config.properties">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/config.properties" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/resources/config.properties">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/resources/config.properties" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1561937179000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;As you can see from the previous stage, we need to find a way to get a response code from the URL in the user’s browser. By default, Java doesn’t have browser capabilities but has opportunities to create your own simple HTTP server.&lt;/p&gt;&#10;&#10;&lt;p&gt;HTTP means &lt;a href=&quot;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Hypertext Transfer Protocol&lt;/a&gt;, which is a stateless data transfer protocol based on client-server technology, where messaging occurs according to the request-response scheme. The main manipulation object is the resource pointed to by the URI. Every time when you need to make HTTP request, follow this structure:&lt;/p&gt;&#10;&#10;&lt;p&gt;A request line&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;method_name URI HTTP/version&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Example&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;GET /some/uri HTTP/1.1&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;There are a lot of HTTP methods, but in this project, we will consider two of them:&lt;/p&gt;&#10;&#10;&lt;p&gt;GET - The GET method requests a representation of the specified resource. Requests using GET should only retrieve data and should have no other effect.&lt;/p&gt;&#10;&#10;&lt;p&gt;POST - The POST method requests that the server accept the entity enclosed in the request as a new subordinate of the web resource identified by the URI.&lt;/p&gt;&#10;&#10;&lt;p&gt;And the response looks like this:&lt;br&gt;&#10;  A response line&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;HTTP/version status_code message&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Example&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;HTTP/1.1 200 OK&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&lt;code&gt;com.sun.net.httpserver&lt;/code&gt; package included in Java SE contains classes, which could help us.&lt;/p&gt;&#10;&#10;&lt;p&gt;The main class is &lt;code&gt;HttpServer&lt;/code&gt;. This class implements a simple HTTP server. To create an instance of this class, you need to use static factory method “create” and bind it to IP and port&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;HttpServer server = HttpServer.create();&#10;server.bind(new InetSocketAddress(8765), 0);&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;These lines will create an http server that will listen for incoming TCP connections from clients on 8765 port. Another main concept is context. When an HTTP request is received, the appropriate &lt;code&gt;HttpContext&lt;/code&gt; (and handler) is located by finding the context whose path is the longest matching prefix of the request URI's path. To create the context you should use method &lt;code&gt;createContext&lt;/code&gt; and pass a string of URI path and handler that implements &lt;code&gt;HttpHandler&lt;/code&gt; interface&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;server.createContext(&quot;/&quot;,&#10;    new HttpHandler() {    &#10;        public void handle(HttpExchange he) throws IOException {&#10;            String hello = &quot;hello, world&quot;;&#10;            he.sendResponseHeaders(200, hello.length());&#10;            he.getResponseBody().write(hello.getBytes());&#10;            he.getResponseBody().close();&#10;        }&#10;    }&#10;); &lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;The lines above will create a context to which all requests will be redirected to the server, and the context handler will always return “hello world”. If you try to run it, you can open your browser at &lt;code&gt;localhost:8765&lt;/code&gt;, and you will see this message.&lt;br&gt;&#10;  &lt;code&gt;java.net&lt;/code&gt; package provides us with a few classes to make HTTP requests. One of them is URL. URL represents a Uniform Resource Locator, a pointer to a &quot;resource&quot; on the World Wide Web. It has method &lt;code&gt;openConnection&lt;/code&gt; that returns an &lt;code&gt;URLConnection&lt;/code&gt;, but it can be cast to &lt;code&gt;HttpURLConnection&lt;/code&gt;:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;HttpURLConnection conn = (HttpURLConnection) new URL(&quot;https://www.google.com&quot;).openConnection();&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&lt;code&gt;HttpURLConnection&lt;/code&gt; represents a connection with HTTP features.&lt;br&gt;&#10;  To set HTTP method you can use &lt;code&gt;setRequestMethod()&lt;/code&gt;. To set headers use &lt;code&gt;setRequestProperty()&lt;/code&gt;.&lt;br&gt;&#10;  to write any data in request body, call &lt;code&gt;doOutput(true);&lt;/code&gt; and then get &lt;code&gt;OutputStream&lt;/code&gt; by calling &lt;code&gt;getOutputStream()&lt;/code&gt; method and write bytes to it. For example, a simple HTTP Post request with “Hello world” message:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;HttpURLConnection conn = (HttpURLConnection) new URL(&quot;http://localhost:8765&quot;).openConnection();&#10;conn.setRequestMethod(&quot;POST&quot;);&#10;conn.doOutput(true);&#10;conn.setRequestProperty(&quot;charset&quot;, &quot;utf-8&quot;);&#10;byte data[]  = &quot;Hello, world!&quot;.getBytes(StandardCharsets.UTF-8);&#10;conn.setRequestProperty(&quot;Content-Length&quot;, data.length);&#10;try( DataOutputStream wr = new DataOutputStream( conn.getOutputStream())) {&#10;    wr.write( data );&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;To get response body, use &lt;code&gt;getInputStream()&lt;/code&gt; method.&lt;/p&gt;&#10;&#10;&lt;p&gt;It should be noted that &lt;code&gt;HttpURLConnection&lt;/code&gt; isn’t suitable for use in real-world projects, because this class is obsolete. A better way would be to use Apache &lt;code&gt;HttpComponents&lt;/code&gt; or if you are using JDK 11, there are a few new classes which could help you to make HTTP requests: &lt;a href=&quot;http://openjdk.java.net/groups/net/httpclient/&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://openjdk.java.net/groups/net/httpclient/&lt;/a&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Using the official documentation of Spotify API and the information given here, improve your program by adding real authorization on Spotify.&lt;/p&gt;&#10;&#10;&lt;p&gt;Actually, you should choose any free port on your machine, and add the &lt;code&gt;http://localhost:your_port&lt;/code&gt; to the whitelist of redirect_uri in your app here. Then on the auth command, you must print auth link and bootstrap HTTP server that will listen for incoming requests. After the code is received, the server must shut down and you should get &lt;code&gt;access_token&lt;/code&gt; by making a POST request on &lt;a href=&quot;https://accounts.spotify.com/api/token&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://accounts.spotify.com/api/token&lt;/a&gt;. with the parameters described here, and then print response body.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Below is an output example of the described program. Try to output all cases like in the example.&lt;br&gt;&#10;  The lines that start with &lt;code&gt;&amp;gt;&lt;/code&gt; represent the user input. Since you already received code you don't need to request access on Spotify site again (you need to do it once). Save the information you need to request access token and request this token on &quot;auth&quot; message from user. &lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;&amp;gt; new&#10;Please, provide access for application.&#10;&amp;gt; auth&#10;making http request for access_token...&#10;response:&#10;{&quot;access_token&quot;:&quot;BQBSZ0CA3KR0cf0LxmiNK_E87ZqnkJKDD89VOWAZ9f0QXJcsCiHtl5Om-EVhkIfwt1AZs5WeXgfEF69e4JxL3YX6IIW9zl9WegTmgLkb4xLXWwhryty488CLoL2SM9VIY6HaHgxYxdmRFGWSzrgH3dEqcvPoLpd26D8Y&quot;,&quot;token_type&quot;:&quot;Bearer&quot;,&quot;expires_in&quot;:3600,&quot;refresh_token&quot;:&quot;AQCSmdQsvsvpneadsdq1brfKlbEWleTE3nprDwPbZgNSge5dVe_svYBG-RG-_PxIGxVvA7gSnehFJjDRAczLDbbdWPjW1yUq2gtKbbNrCQVAH5ZBtY8wAYskmOIW7zn3IEiBzg&quot;,&quot;scope&quot;:&quot;&quot;}&#10;---SUCCESS---&#10;&amp;gt; new&#10;---NEW RELEASES---&#10;Mountains [Sia, Diplo, Labrinth]&#10;Runaway [Lil Peep]&#10;The Greatest Show [Panic! At The Disco]&#10;All Out Life [Slipknot]&#10;&amp;gt; exit&#10;---GOODBYE!---&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/62/stages/337/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5479" />
                      <option name="index" value="3" />
                      <option name="name" value="Useful connections" />
                      <option name="record" value="3" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="test/MusicAdvisorTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/MusicAdvisorTest.java" />
                                <option name="text" value="import advisor.Main;&#10;&#10;import com.google.gson.JsonObject;&#10;import com.google.gson.JsonParser;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;&#10;import java.util.List;&#10;import java.util.function.Function;&#10;&#10;class Attach {&#10;    Function&lt;String, CheckResult&gt; func;&#10;&#10;    Attach(Function&lt;String, CheckResult&gt; func) {&#10;        this.func = func;&#10;    }&#10;}&#10;&#10;public class MusicAdvisorTest extends BaseStageTest&lt;Attach&gt; {&#10;    public MusicAdvisorTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;Attach&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;                    if (!reply.contains(&quot;---SUCCESS---&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;There is no \&quot;---SUCCESS---\&quot; after \&quot;auth\&quot; but should be&quot;);&#10;                    }&#10;                    int startBracket = reply.indexOf(&quot;{&quot;);&#10;                    int endBracket = reply.indexOf(&quot;}&quot;);&#10;                    if (startBracket == -1 || endBracket == -1) {&#10;                        return new CheckResult(false,&#10;                            &quot;There is no JSON response in output after \&quot;auth\&quot; input line&quot;);&#10;                    }&#10;                    String json = reply.substring(startBracket, endBracket + 1);&#10;                    JsonObject response = new JsonParser().parse(json).getAsJsonObject();&#10;                    if (!response.has(&quot;access_token&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;There is no access_token field in &quot; +&#10;                                &quot;response JSON output after \&quot;auth\&quot; input line&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;new\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;                    if (!reply.strip().startsWith(&quot;Please, provide access for application.&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;When no access provided you should output &quot; +&#10;                                &quot;\&quot;Please, provide access for application.\&quot;&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;featured\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;                    if (!reply.strip().startsWith(&quot;Please, provide access for application.&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;When no access provided you should output &quot; +&#10;                                &quot;\&quot;Please, provide access for application.\&quot;&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\nnew\nfeatured\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;                    if (!reply.contains(&quot;---NEW RELEASES---&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;When \&quot;new\&quot; was inputted there should be \&quot;---NEW RELEASES---\&quot; line&quot;);&#10;                    }&#10;                    if (!reply.contains(&quot;---FEATURED---&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;When \&quot;featured\&quot; was inputted there should be \&quot;---FEATURED---\&quot; line&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                }))&#10;&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, Attach clue) {&#10;        return clue.func.apply(reply);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/Main.java" />
                                <option name="text" value="package advisor;&#10;&#10;import advisor.manager.CommandManager;&#10;&#10;import java.io.FileInputStream;&#10;import java.io.FileNotFoundException;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.net.URL;&#10;import java.util.Arrays;&#10;import java.util.Properties;&#10;import java.util.Scanner;&#10;&#10;public class Main {&#10;&#10;    CommandManager commandManager;&#10;    Properties appConfig;&#10;&#10;    public Main() {&#10;        Scanner scanner = new Scanner(System.in);&#10;        this.commandManager = new CommandManager(scanner);&#10;        //this.appConfig = loadConfig();&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        Main application = new Main();&#10;        application.start();&#10;    }&#10;&#10;    public void start() {&#10;        commandManager.executeLine();&#10;    }&#10;&#10;    private Properties loadConfig() {&#10;        Properties appConfig = new Properties();&#10;        try {&#10;            // load the properties file using load() and an input stream&#10;            //FileInputStream in = new FileInputStream(&quot;resources/config.properties&quot;);&#10;            ClassLoader classLoader = getClass().getClassLoader();&#10;            URL resource = classLoader.getResource(&quot;/Music Advisor/task/src/advisor/config.properties&quot;);&#10;&#10;            System.out.println(resource);&#10;            System.out.println(&quot;----------------------------&quot;);&#10;&#10;            InputStream in = getClass()&#10;                    .getClassLoader().getResourceAsStream(&quot;/config.properties&quot;);&#10;            appConfig.load(in);&#10;            in.close();&#10;&#10;            appConfig.list(System.out);&#10;&#10;&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;&#10;        return appConfig;&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="build.gradle">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="build.gradle" />
                                <option name="text" value="apply plugin: 'java'&#10;apply plugin: 'application'&#10;&#10;group 'advisor'&#10;version '1.0-SNAPSHOT'&#10;&#10;sourceCompatibility = 11&#10;mainClassName = 'advisor.Main'&#10;&#10;repositories {&#10;    mavenCentral()&#10;}&#10;&#10;dependencies {&#10;    compile 'com.google.code.gson:gson:+'&#10;}&#10;&#10;jar {&#10;    manifest {&#10;        attributes 'Main-Class' : 'advisor.Main'&#10;    }&#10;    from {&#10;        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/manager/CommandManager.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/manager/CommandManager.java" />
                                <option name="text" value="package advisor.manager;&#10;&#10;import advisor.command.Command;&#10;import advisor.command.CommandFactory;&#10;import advisor.exception.InvalidInputException;&#10;import advisor.service.SpotifyService;&#10;&#10;import java.util.Scanner;&#10;&#10;public class CommandManager {&#10;&#10;    CommandFactory commandFactory;&#10;    Scanner scanner;&#10;    boolean getNextLine = true;&#10;&#10;    boolean userLogged = false;&#10;&#10;    public CommandManager(Scanner scanner) {&#10;        this.scanner = scanner;&#10;        this.commandFactory = new CommandFactory();&#10;    }&#10;&#10;    public void executeLine()&#10;    {&#10;        String nextLine = getNextLine();&#10;        if (!nextLine.isEmpty()) {&#10;&#10;            try {&#10;                startCommand(nextLine);&#10;            } catch (Exception e) {&#10;                System.out.println(e.getMessage());&#10;&#10;            }&#10;        }&#10;&#10;        if (getNextLine) {&#10;            executeLine();&#10;        }&#10;    }&#10;&#10;    private void startCommand(String line) throws InvalidInputException {&#10;        Command command = commandFactory.getCommand(line);&#10;        if (!command.isLoginRequired() || (command.isLoginRequired() &amp;&amp; SpotifyService.isUserLogged())) {&#10;            command.handle();&#10;        }&#10;        else {&#10;            System.out.println(&quot;Please, provide access for application.&quot;);&#10;        }&#10;&#10;        if (command.isExitCommand()) {&#10;            getNextLine = false;&#10;        }&#10;    }&#10;&#10;    private String getNextLine() {&#10;        return scanner.nextLine();&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/HelpCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/command/HelpCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class HelpCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String helpMessage = &quot;The program calculates the sum of numbers //n - calculator support the addition + and subtraction - operators&quot;;&#10;&#10;    @Override&#10;    public void handle() {&#10;        System.out.println(helpMessage);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/Command.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/Command.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public abstract class Command {&#10;&#10;    protected boolean exitCommand = false;&#10;&#10;    protected boolean loginRequired = true;&#10;&#10;    public abstract void handle();&#10;&#10;    public boolean isLoginRequired() {&#10;        return loginRequired;&#10;    }&#10;&#10;    public boolean isExitCommand() {&#10;        return exitCommand;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/ExitCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/ExitCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class ExitCommand extends Command{&#10;&#10;    public ExitCommand() {&#10;        this.exitCommand = true;&#10;    }&#10;&#10;    @Override&#10;    public void handle() {&#10;        System.out.println(&quot;---GOODBYE!---&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/CommandFactory.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/CommandFactory.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;import advisor.exception.InvalidInputException;&#10;&#10;public class CommandFactory {&#10;&#10;    private final String unknownMessage = &quot;Unknown command&quot;;&#10;    private final String missingParameterMessage = &quot;Missing Parameter&quot;;&#10;&#10;    private final String playlistsCommand = &quot;playlists&quot;;&#10;    private final String newCommand = &quot;new&quot;;&#10;    private final String featuredCommand = &quot;featured&quot;;&#10;    private final String categoriesCommand = &quot;categories&quot;;&#10;    private final String helpCommand = &quot;help&quot;;&#10;    private final String stopCommand = &quot;exit&quot;;&#10;    private final String authCommand = &quot;auth&quot;;&#10;&#10;    public Command getCommand(String commandLine) throws InvalidInputException {&#10;&#10;        String[] parts = commandLine.split(&quot;\\s&quot;, 2);&#10;        String textCommand = parts[0];&#10;&#10;        String parameters = null;&#10;        if (parts.length &gt; 1 ) {&#10;            parameters = parts[1];&#10;        }&#10;&#10;        Command command;&#10;        switch (textCommand) {&#10;            case helpCommand:&#10;                command = new HelpCommand();&#10;                break;&#10;            case stopCommand:&#10;                command = new ExitCommand();&#10;                break;&#10;            case featuredCommand:&#10;                command = new FeaturedCommand();&#10;                break;&#10;            case newCommand:&#10;                command = new NewCommand();&#10;                break;&#10;            case categoriesCommand:&#10;                command = new CategoriesCommand();&#10;                break;&#10;            case authCommand:&#10;                command = new AuthCommand();&#10;                break;&#10;            case playlistsCommand:&#10;                if (parameters == null) {&#10;                    throw new InvalidInputException(missingParameterMessage);&#10;                }&#10;                command = new PlaylistsCommand(parameters);&#10;                break;&#10;            default:&#10;                throw new InvalidInputException(unknownMessage + &quot; &quot; + textCommand);&#10;        }&#10;&#10;&#10;        return command;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/exception/InvalidInputException.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/exception/InvalidInputException.java" />
                                <option name="text" value="package advisor.exception;&#10;&#10;public class InvalidInputException extends Exception {&#10;&#10;    public InvalidInputException(String errorMessage) {&#10;        super(errorMessage);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/FeaturedCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/FeaturedCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class FeaturedCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String title = &quot;---FEATURED---&quot;;&#10;    private String message = &quot;Mellow Morning\n&quot; +&#10;            &quot;Wake Up and Smell the Coffee\n&quot; +&#10;            &quot;Monday Motivation\n&quot; +&#10;            &quot;Songs to Sing in the Shower&quot;;&#10;&#10;    @Override&#10;    public void handle() {&#10;&#10;        System.out.println(title);&#10;&#10;        System.out.println(message);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/NewCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/NewCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class NewCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String title = &quot;---NEW RELEASES---&quot;;&#10;    private String message = &quot;Mountains [Sia, Diplo, Labrinth]\n&quot; +&#10;            &quot;Runaway [Lil Peep]\n&quot; +&#10;            &quot;The Greatest Show [Panic! At The Disco]\n&quot; +&#10;            &quot;All Out Life [Slipknot]&quot;;&#10;&#10;    @Override&#10;    public void handle() {&#10;&#10;        System.out.println(title);&#10;        System.out.println(message);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/CategoriesCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/CategoriesCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class CategoriesCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String title = &quot;---CATEGORIES---&quot;;&#10;    private String message =  &quot;Top Lists\n&quot; +&#10;            &quot;Pop\n&quot; +&#10;            &quot;Mood\n&quot; +&#10;            &quot;Latin&quot;;&#10;&#10;    @Override&#10;    public void handle() {&#10;&#10;        System.out.println(title);&#10;        System.out.println(message);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/PlaylistsCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/PlaylistsCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class PlaylistsCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String categoryName;&#10;&#10;    private String title = &quot;---C_NAME PLAYLISTS---&quot;;&#10;    private String message =  &quot;Mountains [Sia, Diplo, Labrinth]\n&quot; +&#10;            &quot;Runaway [Lil Peep]\n&quot; +&#10;            &quot;The Greatest Show [Panic! At The Disco]\n&quot; +&#10;            &quot;All Out Life [Slipknot]&quot;;&#10;&#10;&#10;    public PlaylistsCommand(String parametersString) {&#10;        this.categoryName = parametersString;&#10;        title = title.replaceAll(&quot;C_NAME&quot;, this.categoryName.toUpperCase());&#10;    }&#10;&#10;    @Override&#10;    public void handle() {&#10;&#10;        System.out.println(title);&#10;        System.out.println(message);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/AuthCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/command/AuthCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;import advisor.service.SpotifyService;&#10;&#10;public class AuthCommand extends Command{&#10;&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private SpotifyService spotifyService;&#10;&#10;    private String title = &quot;&quot;;&#10;    private String message =  &quot;&quot;;&#10;&#10;    public AuthCommand() {&#10;        this.loginRequired = false;&#10;        spotifyService = new SpotifyService();&#10;    }&#10;&#10;    @Override&#10;    public void handle() {&#10;&#10;        System.out.println(spotifyService.getAuthorizationUrl());&#10;        System.out.println(&quot;---SUCCESS---&quot;);&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/service/SpotifyService.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/service/SpotifyService.java" />
                                <option name="text" value="package advisor.service;&#10;&#10;public class SpotifyService {&#10;&#10;    private static String redirect_uri = &quot;https://www.example.com&amp;response_type=code&quot;;&#10;    private static String uri = &quot;https://accounts.spotify.com/authorize?&quot;;&#10;    private static String client_id = &quot;3c1f0675fb224be6807fdd578f1d84cb&quot;;&#10;    private static String client_secret = &quot;97cdf492b8934099a263ddd75f02d3ca&quot;;&#10;&#10;&#10;    private static boolean userLogged = false;&#10;&#10;    public static boolean isUserLogged() {&#10;        return userLogged;&#10;    }&#10;&#10;    public String getAuthorizationUrl() {&#10;&#10;        StringBuilder authUrl = new StringBuilder();&#10;        authUrl.append(uri)&#10;                .append(&quot;client_id=&quot;).append(client_id)&#10;                .append(&quot;&amp;&quot;).append(&quot;redirect_uri=&quot;).append(redirect_uri);&#10;&#10;        //for now change flag right after gen auth link&#10;        userLogged = true;&#10;&#10;        return authUrl.toString();&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/resources/config.properties">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/resources/config.properties" />
                                <option name="text" value="service.spotify.url = https://accounts.spotify.com/authorize?&#10;service.spotify.redirect_uri = https://www.example.com&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/resources/config.properties">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/resources/config.properties" />
                                <option name="text" value="service.spotify.url = https://accounts.spotify.com/authorize?&#10;service.spotify.redirect_uri = https://www.example.com&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/config.properties">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/config.properties" />
                                <option name="text" value="service.spotify.url = https://accounts.spotify.com/authorize?&#10;service.spotify.redirect_uri = https://www.example.com&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1561937180000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Since the API basically responds in JSON format, we need to handle it somehow. Writing your own JSON parser will take a lot of time, so we will use the ready-made solution of the GSON library. The &lt;code&gt;build.gradle&lt;/code&gt; file already has this dependency connected, see this line:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;compile 'com.google.code.gson:gson:+'&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;For more information about JSON format look  &lt;a href=&quot;https://www.quackit.com/json/tutorial/what_is_json.cfm&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;To work with JSON you need to use a &lt;code&gt;GSON&lt;/code&gt; library made by Google. You can look &lt;a href=&quot;http://zetcode.com/java/gson/&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt; how to use it.&lt;/p&gt;&#10;&#10;&lt;p&gt;To use it in your project, you need to create a Gson object:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Gson gson = new Gson();&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;And then use one of these methods:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String gson.toJson(Object src)&#10;T gson.fromJson(String json, Class&amp;lt;T&amp;gt; type)&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Since the Spotify API is based on simple REST principles, we must learn what REST means. Representational State Transfer (REST) is a software architectural style that defines a set of constraints to be used for creating web services.&lt;br&gt;&#10;    It works over HTTP. The main concept of REST is resource - every URL defines its own resource and every HTTP method defines a verb you want to do with this resource.&lt;/p&gt;&#10;&#10;&lt;p&gt;Examples&lt;br&gt;&#10;    /albums -- with GET method should return representational state of all albums, but&lt;br&gt;&#10;    /albums -- with POST method should create new resource over /albums URL&lt;br&gt;&#10;    /albums/5 -- with PUT method should update information about the fifth album&lt;br&gt;&#10;    /albums/5 -- with DELETE method should delete album number 5&lt;/p&gt;&#10;&#10;&lt;p&gt;Every request to an API must contain header the “Authorization” with value “Bearer + access_token”. Extra information may be passed in query parameters (if it is a GET method) or in the request body (if it is a POST method).&lt;/p&gt;&#10;&#10;&lt;p&gt;In this stage, you have to create an abstract class which will contain the basic logic of connecting to Spotify API and inherits other classes from it that will implement a specific HTTP request. Then implement the full realization of the app.&lt;/p&gt;&#10;&#10;&lt;p&gt;Example (it requires Apache Commons IO, you should add it into Gradle dependencies if you want to use the code below):&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;abstract class AbstractRequest {&#10;    private HttpURLConnection conn;&#10;&#10;    private AccessToken token;&#10;    protected String path;&#10;&#10;    public AbstractRequest(AccessToken token) {&#10;        this.token = token;&#10;    }&#10;&#10;    public &amp;lt;T&amp;gt; T execute() {&#10;         conn = (HttpURLConnection) new URL(path).openConnection();&#10;&#10;         conn.setRequestProperty(“Authorization”, “Bearer “ + token.getAccessToken());&#10;&#10;         /* Apache commons IO to simplify work with streams */&#10;         String json = IOUtils.toString(connection.getInputStream(), Charset.forName(&quot;UTF-8&quot;));&#10;&#10;         return (T) json;&#10;    }&#10;}&#10;&#10;class CategoriesRequest extends AbstractRequest {&#10;&#10;    public CategoriesRequest(AccessToken token) {&#10;        super(token);&#10;        path = &quot;https://api.spotify.com/v1/browse/categories&quot;;&#10;    }&#10;&#10;    public CategoriesPage execute() {&#10;        Gson gson = new Gson();&#10;&#10;        CategoryWrapper cw = gson.fromJson(super.execute(),&#10;                                  CategoryWrapper.class).getCategories();&#10;&#10;        return cw;&#10;    }&#10;}&#10;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;To get all categories use &lt;a href=&quot;https://api.spotify.com/v1/browse/categories&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://api.spotify.com/v1/browse/categories&lt;/a&gt;&lt;br&gt;&#10;    To get a playlist use &lt;a href=&quot;https://api.spotify.com/v1/browse/categories/{category_id}/playlists&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://api.spotify.com/v1/browse/categories/{category_id}/playlists&lt;/a&gt;&lt;br&gt;&#10;    To get new releases &lt;a href=&quot;https://api.spotify.com/v1/browse/new-releases&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://api.spotify.com/v1/browse/new-releases&lt;/a&gt;&lt;br&gt;&#10;    To get featured playlists &lt;a href=&quot;https://api.spotify.com/v1/browse/featured-playlists&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://api.spotify.com/v1/browse/featured-playlists&lt;/a&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Full documentation could be found here:&lt;br&gt;&#10;    &lt;a href=&quot;https://developer.spotify.com/documentation/web-api/reference/&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developer.spotify.com/documentation/web-api/reference/&lt;/a&gt;&lt;br&gt;&#10;    Object model:&lt;br&gt;&#10;    &lt;a href=&quot;https://developer.spotify.com/documentation/web-api/reference/object-model/&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://developer.spotify.com/documentation/web-api/reference/object-model/&lt;/a&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Also, in this stage, you should read server points from arguments, both to the access server and to the resource server. Access server path should be passed to the program using &lt;code&gt;-access&lt;/code&gt; argument and resource server path should be passed to the program using &lt;code&gt;-resource&lt;/code&gt; argument. If these arguments are not set you should use default arguments - &lt;code&gt;https://accounts.spotify.com&lt;/code&gt; for an access server path and &lt;code&gt;https://api.spotify.com&lt;/code&gt; for a resource server. Make sure you replace constants to these arguments values everywhere!&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Below is an output example of the described program. Try to output all cases like in the example.&lt;br&gt;&#10;    The lines that start with &lt;code&gt;&amp;gt;&lt;/code&gt; represent the user input.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;&amp;gt; new&#10;Please, provide access for application.&#10;&amp;gt; auth&#10;Making http request for access_token...&#10;Success!&#10;&amp;gt; new&#10;NOT ALL HEROES WEAR CAPES&#10;[Metro Boomin, Travis Scott, 21 Savage]&#10;https://open.spotify.com/album/1zNr37qd3iZJ899byrTkcj&#10;&#10;I Used To Know Her - Part 2 - EP&#10;[H.E.R.]&#10;https://open.spotify.com/album/46imFLgb9fR1Io6EoPYeQh&#10;&#10;The Last Rocket&#10;[Takeoff]&#10;https://open.spotify.com/album/5XRCcUfwtLNQflDd9cfz4U&#10;&#10;Interstate Gospel&#10;[Pistol Annies]&#10;https://open.spotify.com/album/0IXxmmlfSQxgJNWnNjHhgJ&#10;&#10;El Mal Querer&#10;[ROSALÍA]&#10;https://open.spotify.com/album/355bjCHzRJztCzaG5Za4gq&#10;&#10;I Found You (with Calvin Harris)&#10;[benny blanco, Calvin Harris]&#10;https://open.spotify.com/album/3jfSJj7tHJxk1a4i2KZt9F&#10;&#10;Back to Life (from &quot;Bumblebee&quot;)&#10;[Hailee Steinfeld]&#10;https://open.spotify.com/album/3sSEnG2RZGnZlTFwJwxPy4&#10;&#10;&amp;gt; featured&#10;Creativity Boost&#10;https://open.spotify.com/playlist/37i9dQZF1DX56qfiUZBncF&#10;&#10;Music for a Workday&#10;https://open.spotify.com/playlist/37i9dQZF1DXcsT4WKI8W8r&#10;&#10;Dance Rewind&#10;https://open.spotify.com/playlist/37i9dQZF1DX0BcQWzuB7ZO&#10;&#10;Acoustic Throwbacks&#10;https://open.spotify.com/playlist/37i9dQZF1DX8TvdyVZSYFY&#10;&#10;Hit Rewind&#10;https://open.spotify.com/playlist/37i9dQZF1DX0s5kDXi1oC5&#10;&#10;Soul Coffee&#10;https://open.spotify.com/playlist/37i9dQZF1DXaXDsfv6nvZ5&#10;&#10;Workday Lounge&#10;https://open.spotify.com/playlist/37i9dQZF1DWT5lkChsPmpy&#10;&#10;&amp;gt; categories&#10;Top Lists&#10;Pop&#10;Mood&#10;Hip-Hop&#10;Decades&#10;Chill&#10;Electronic/Dance&#10;R&amp;amp;B&#10;Party&#10;Indie&#10;Workout&#10;Season's Greetings&#10;Rock&#10;Afro&#10;Sleep&#10;&amp;gt; playlists Sleep&#10;Sleep&#10;https://open.spotify.com/playlist/37i9dQZF1DWZd79rJ6a7lp&#10;&#10;Songs For Sleeping&#10;https://open.spotify.com/playlist/37i9dQZF1DWStLt4f1zJ6I&#10;&#10;Peaceful Piano&#10;https://open.spotify.com/playlist/37i9dQZF1DX4sWSpwq3LiO&#10;&#10;Ambient Chill&#10;https://open.spotify.com/playlist/37i9dQZF1DX3Ogo9pFvBkY&#10;&#10;Night Rain&#10;https://open.spotify.com/playlist/37i9dQZF1DXbcPC6Vvqudd&#10;&#10;&amp;gt; exit&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/62/stages/338/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5480" />
                      <option name="index" value="4" />
                      <option name="name" value="Processing links" />
                      <option name="record" value="-1" />
                      <option name="status" value="Failed" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="test/MusicAdvisorTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/MusicAdvisorTest.java" />
                                <option name="text" value="import advisor.Main;&#10;&#10;import org.hyperskill.hstest.v5.mocks.web.WebServerMock;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;&#10;import java.util.List;&#10;import java.util.function.Function;&#10;&#10;class Attach {&#10;    Function&lt;String, CheckResult&gt; func;&#10;&#10;    Attach(Function&lt;String, CheckResult&gt; func) {&#10;        this.func = func;&#10;    }&#10;}&#10;&#10;public class MusicAdvisorTest extends BaseStageTest&lt;Attach&gt; {&#10;    public MusicAdvisorTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    private String accessToken = &quot;21BSZ1CA3KR0cf0LxmiNK_E87ZqnkJ3DD89VOWAZ9f0aXJcsCiH7l5Om-EVhkIfwt1AZs5WeXgfEF69e4JqL3YX1IIW9zl91egTmgLkb4xLXWwhryty478CLoL2SM9VIY6HaHgxYxdmRFGWSzrgH3yEqcvPoLpd26D8Y&quot;;&#10;&#10;    private String refreshToken = &quot;AQCSmdQsvsvpneadsdq1brfKlbEWleTE3nprDwPbZgNSge5dVe_svYBG-RG-_PxIGxVvA7gSnehFJjDRAczLDbbdWPjW1yUq2gtKbbNrCQVAH5ZBtY8wAYskmOIW7zn3IEiBzg&quot;;&#10;&#10;    private String tokenResponse = &quot;{&quot; +&#10;        &quot;\&quot;access_token\&quot;:\&quot;&quot; + accessToken + &quot;\&quot;,&quot; +&#10;        &quot;\&quot;token_type\&quot;:\&quot;Bearer\&quot;,&quot; +&#10;        &quot;\&quot;expires_in\&quot;:3600,&quot; +&#10;        &quot;\&quot;refresh_token\&quot;:&quot; + &quot;\&quot;&quot; + refreshToken + &quot;\&quot;,&quot; +&#10;        &quot;\&quot;scope\&quot;:\&quot;\&quot;&quot; +&#10;        &quot;}&quot;;&#10;&#10;    private int accessServerPort = 45678;&#10;    private int resourceServerPort = 56789;&#10;&#10;    private String accessServerUrl = &quot;http://127.0.0.1:&quot; + accessServerPort;&#10;    private String resourceServerUrl = &quot;http://127.0.0.1:&quot; + resourceServerPort;&#10;    private String spotifyServerUrl = &quot;https://api\\.spotify\\.com&quot;;&#10;&#10;    private String apiCategoriesResponse = &quot;{\n&quot; +&#10;        &quot;    \&quot;categories\&quot;: {\n&quot; +&#10;        &quot;        \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/browse/categories?offset=0&amp;limit=20\&quot;,\n&quot; +&#10;        &quot;        \&quot;items\&quot;: [\n&quot; +&#10;        &quot;            {\n&quot; +&#10;        &quot;                \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/browse/categories/toplists\&quot;,\n&quot; +&#10;        &quot;                \&quot;icons\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 275,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://datsnxq1rwndn.cloudfront.net/media/derived/toplists_11160599e6a04ac5d6f2757f5511778f_0_0_275_275.jpg\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 275\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;id\&quot;: \&quot;toplists\&quot;,\n&quot; +&#10;        &quot;                \&quot;name\&quot;: \&quot;Top Lists\&quot;\n&quot; +&#10;        &quot;            },\n&quot; +&#10;        &quot;            {\n&quot; +&#10;        &quot;                \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/browse/categories/mood\&quot;,\n&quot; +&#10;        &quot;                \&quot;icons\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 274,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://datsnxq1rwndn.cloudfront.net/media/original/mood-274x274_976986a31ac8c49794cbdc7246fd5ad7_274x274.jpg\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 274\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;id\&quot;: \&quot;mood\&quot;,\n&quot; +&#10;        &quot;                \&quot;name\&quot;: \&quot;Super Mood\&quot;\n&quot; +&#10;        &quot;            },\n&quot; +&#10;        &quot;            {\n&quot; +&#10;        &quot;                \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/browse/categories/party\&quot;,\n&quot; +&#10;        &quot;                \&quot;icons\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 274,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://datsnxq1rwndn.cloudfront.net/media/derived/party-274x274_73d1907a7371c3bb96a288390a96ee27_0_0_274_274.jpg\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 274\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;id\&quot;: \&quot;party\&quot;,\n&quot; +&#10;        &quot;                \&quot;name\&quot;: \&quot;Party Time\&quot;\n&quot; +&#10;        &quot;            }\n&quot; +&#10;        &quot;        ],\n&quot; +&#10;        &quot;        \&quot;limit\&quot;: 20,\n&quot; +&#10;        &quot;        \&quot;next\&quot;: null,\n&quot; +&#10;        &quot;        \&quot;offset\&quot;: 0,\n&quot; +&#10;        &quot;        \&quot;previous\&quot;: null,\n&quot; +&#10;        &quot;        \&quot;total\&quot;: 3\n&quot; +&#10;        &quot;    }\n&quot; +&#10;        &quot;}&quot;.replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;&#10;    private String apiPlaylistsPartyResponse = &quot;{\n&quot; +&#10;        &quot;    \&quot;playlists\&quot;: {\n&quot; +&#10;        &quot;        \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/browse/categories/party/playlists?offset=0&amp;limit=20\&quot;,\n&quot; +&#10;        &quot;        \&quot;items\&quot;: [\n&quot; +&#10;        &quot;            {\n&quot; +&#10;        &quot;                \&quot;collaborative\&quot;: false,\n&quot; +&#10;        &quot;                \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;spotify\&quot;: \&quot;http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotifybrazilian/playlists/4k7EZPI3uKMz4aRRrLVfen\&quot;,\n&quot; +&#10;        &quot;                \&quot;id\&quot;: \&quot;4k7EZPI3uKMz4aRRrLVfen\&quot;,\n&quot; +&#10;        &quot;                \&quot;images\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 300,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/bf6544c213532e9650088dfef76c8521093d970e\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 300\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;name\&quot;: \&quot;Noite Eletrônica\&quot;,\n&quot; +&#10;        &quot;                \&quot;owner\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                        \&quot;spotify\&quot;: \&quot;http://open.spotify.com/user/spotifybrazilian\&quot;\n&quot; +&#10;        &quot;                    },\n&quot; +&#10;        &quot;                    \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotifybrazilian\&quot;,\n&quot; +&#10;        &quot;                    \&quot;id\&quot;: \&quot;spotifybrazilian\&quot;,\n&quot; +&#10;        &quot;                    \&quot;type\&quot;: \&quot;user\&quot;,\n&quot; +&#10;        &quot;                    \&quot;uri\&quot;: \&quot;spotify:user:spotifybrazilian\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;public\&quot;: null,\n&quot; +&#10;        &quot;                \&quot;snapshot_id\&quot;: \&quot;PULvu1V2Ps8lzCxNXfNZTw4QbhBpaV0ZORc03Mw6oj6kQw9Ks2REwhL5Xcw/74wL\&quot;,\n&quot; +&#10;        &quot;                \&quot;tracks\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotifybrazilian/playlists/4k7EZPI3uKMz4aRRrLVfen/tracks\&quot;,\n&quot; +&#10;        &quot;                    \&quot;total\&quot;: 100\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;type\&quot;: \&quot;playlist\&quot;,\n&quot; +&#10;        &quot;                \&quot;uri\&quot;: \&quot;spotify:user:spotifybrazilian:playlist:4k7EZPI3uKMz4aRRrLVfen\&quot;\n&quot; +&#10;        &quot;            },\n&quot; +&#10;        &quot;            {\n&quot; +&#10;        &quot;                \&quot;collaborative\&quot;: false,\n&quot; +&#10;        &quot;                \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;spotify\&quot;: \&quot;http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotifybrazilian/playlists/4HZh0C9y80GzHDbHZyX770\&quot;,\n&quot; +&#10;        &quot;                \&quot;id\&quot;: \&quot;4HZh0C9y80GzHDbHZyX770\&quot;,\n&quot; +&#10;        &quot;                \&quot;images\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 300,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/be6c333146674440123073cb32c1c8b851e69023\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 300\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;name\&quot;: \&quot;Festa Indie\&quot;,\n&quot; +&#10;        &quot;                \&quot;owner\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                        \&quot;spotify\&quot;: \&quot;http://open.spotify.com/user/spotifybrazilian\&quot;\n&quot; +&#10;        &quot;                    },\n&quot; +&#10;        &quot;                    \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotifybrazilian\&quot;,\n&quot; +&#10;        &quot;                    \&quot;id\&quot;: \&quot;spotifybrazilian\&quot;,\n&quot; +&#10;        &quot;                    \&quot;type\&quot;: \&quot;user\&quot;,\n&quot; +&#10;        &quot;                    \&quot;uri\&quot;: \&quot;spotify:user:spotifybrazilian\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;public\&quot;: null,\n&quot; +&#10;        &quot;                \&quot;snapshot_id\&quot;: \&quot;V66hh9k2HnLCdzHvtoXPv+tm0jp3ODM63SZ0oISfGnlHQxwG/scupDbKgIo99Zfz\&quot;,\n&quot; +&#10;        &quot;                \&quot;tracks\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotifybrazilian/playlists/4HZh0C9y80GzHDbHZyX770/tracks\&quot;,\n&quot; +&#10;        &quot;                    \&quot;total\&quot;: 74\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;type\&quot;: \&quot;playlist\&quot;,\n&quot; +&#10;        &quot;                \&quot;uri\&quot;: \&quot;spotify:user:spotifybrazilian:playlist:4HZh0C9y80GzHDbHZyX770\&quot;\n&quot; +&#10;        &quot;            }\n&quot; +&#10;        &quot;        ],\n&quot; +&#10;        &quot;        \&quot;limit\&quot;: 20,\n&quot; +&#10;        &quot;        \&quot;next\&quot;: null,\n&quot; +&#10;        &quot;        \&quot;offset\&quot;: 0,\n&quot; +&#10;        &quot;        \&quot;previous\&quot;: null,\n&quot; +&#10;        &quot;        \&quot;total\&quot;: 2\n&quot; +&#10;        &quot;    }\n&quot; +&#10;        &quot;}&quot;.replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;&#10;    private String apiNewReleasesResponse = &quot;{\n&quot; +&#10;        &quot;    \&quot;albums\&quot;: {\n&quot; +&#10;        &quot;        \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/browse/new-releases?offset=0&amp;limit=20\&quot;,\n&quot; +&#10;        &quot;        \&quot;items\&quot;: [\n&quot; +&#10;        &quot;            {\n&quot; +&#10;        &quot;                \&quot;album_type\&quot;: \&quot;single\&quot;,\n&quot; +&#10;        &quot;                \&quot;artists\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                            \&quot;spotify\&quot;: \&quot;https://open.spotify.com/artist/2RdwBSPQiwcmiDo9kixcl8\&quot;\n&quot; +&#10;        &quot;                        },\n&quot; +&#10;        &quot;                        \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/artists/2RdwBSPQiwcmiDo9kixcl8\&quot;,\n&quot; +&#10;        &quot;                        \&quot;id\&quot;: \&quot;2RdwBSPQiwcmiDo9kixcl8\&quot;,\n&quot; +&#10;        &quot;                        \&quot;name\&quot;: \&quot;Pharrell Williams\&quot;,\n&quot; +&#10;        &quot;                        \&quot;type\&quot;: \&quot;artist\&quot;,\n&quot; +&#10;        &quot;                        \&quot;uri\&quot;: \&quot;spotify:artist:2RdwBSPQiwcmiDo9kixcl8\&quot;\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;available_markets\&quot;: [\n&quot; +&#10;        &quot;                    \&quot;AD\&quot;\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;spotify\&quot;: \&quot;https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/albums/5ZX4m5aVSmWQ5iHAPQpT71\&quot;,\n&quot; +&#10;        &quot;                \&quot;id\&quot;: \&quot;5ZX4m5aVSmWQ5iHAPQpT71\&quot;,\n&quot; +&#10;        &quot;                \&quot;images\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 640,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/e6b635ebe3ef4ba22492f5698a7b5d417f78b88a\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 640\n&quot; +&#10;        &quot;                    },\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 300,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/92ae5b0fe64870c09004dd2e745a4fb1bf7de39d\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 300\n&quot; +&#10;        &quot;                    },\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 64,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/8a7ab6fc2c9f678308ba0f694ecd5718dc6bc930\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 64\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;name\&quot;: \&quot;Runnin'\&quot;,\n&quot; +&#10;        &quot;                \&quot;type\&quot;: \&quot;album\&quot;,\n&quot; +&#10;        &quot;                \&quot;uri\&quot;: \&quot;spotify:album:5ZX4m5aVSmWQ5iHAPQpT71\&quot;\n&quot; +&#10;        &quot;            },\n&quot; +&#10;        &quot;            {\n&quot; +&#10;        &quot;                \&quot;album_type\&quot;: \&quot;single\&quot;,\n&quot; +&#10;        &quot;                \&quot;artists\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                            \&quot;spotify\&quot;: \&quot;https://open.spotify.com/artist/3TVXtAsR1Inumwj472S9r4\&quot;\n&quot; +&#10;        &quot;                        },\n&quot; +&#10;        &quot;                        \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/artists/3TVXtAsR1Inumwj472S9r4\&quot;,\n&quot; +&#10;        &quot;                        \&quot;id\&quot;: \&quot;3TVXtAsR1Inumwj472S9r4\&quot;,\n&quot; +&#10;        &quot;                        \&quot;name\&quot;: \&quot;Drake2\&quot;,\n&quot; +&#10;        &quot;                        \&quot;type\&quot;: \&quot;artist\&quot;,\n&quot; +&#10;        &quot;                        \&quot;uri\&quot;: \&quot;spotify:artist:3TVXtAsR1Inumwj472S9r4\&quot;\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;available_markets\&quot;: [\n&quot; +&#10;        &quot;                    \&quot;AD\&quot;\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;spotify\&quot;: \&quot;https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/albums/0geTzdk2InlqIoB16fW9Nd\&quot;,\n&quot; +&#10;        &quot;                \&quot;id\&quot;: \&quot;0geTzdk2InlqIoB16fW9Nd\&quot;,\n&quot; +&#10;        &quot;                \&quot;images\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 640,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/d40e9c3d22bde2fbdb2ecc03cccd7a0e77f42e4c\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 640\n&quot; +&#10;        &quot;                    },\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 300,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/dff06a3375f6d9b32ecb081eb9a60bbafecb5731\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 300\n&quot; +&#10;        &quot;                    },\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 64,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/808a02bd7fc59b0652c9df9f68675edbffe07a79\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 64\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;name\&quot;: \&quot;Sneakin’\&quot;,\n&quot; +&#10;        &quot;                \&quot;type\&quot;: \&quot;album\&quot;,\n&quot; +&#10;        &quot;                \&quot;uri\&quot;: \&quot;spotify:album:0geTzdk2InlqIoB16fW9Nd\&quot;\n&quot; +&#10;        &quot;            }\n&quot; +&#10;        &quot;        ],\n&quot; +&#10;        &quot;        \&quot;limit\&quot;: 20,\n&quot; +&#10;        &quot;        \&quot;next\&quot;: null,\n&quot; +&#10;        &quot;        \&quot;offset\&quot;: 0,\n&quot; +&#10;        &quot;        \&quot;previous\&quot;: null,\n&quot; +&#10;        &quot;        \&quot;total\&quot;: 2\n&quot; +&#10;        &quot;    }\n&quot; +&#10;        &quot;}&quot;.replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;&#10;    private String apiFeaturedPlaylistsResponse = &quot;{\n&quot; +&#10;        &quot;    \&quot;message\&quot;: \&quot;Monday morning music, coming right up!\&quot;,\n&quot; +&#10;        &quot;    \&quot;playlists\&quot;: {\n&quot; +&#10;        &quot;        \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/browse/featured-playlists?offset=0&amp;limit=20\&quot;,\n&quot; +&#10;        &quot;        \&quot;items\&quot;: [\n&quot; +&#10;        &quot;            {\n&quot; +&#10;        &quot;                \&quot;collaborative\&quot;: false,\n&quot; +&#10;        &quot;                \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;spotify\&quot;: \&quot;http://open.spotify.com/user/spotify/playlist/6ftJBzU2LLQcaKefMi7ee7\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotify/playlists/6ftJBzU2LLQcaKefMi7ee7\&quot;,\n&quot; +&#10;        &quot;                \&quot;id\&quot;: \&quot;6ftJBzU2LLQcaKefMi7ee7\&quot;,\n&quot; +&#10;        &quot;                \&quot;images\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 300,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/7bd33c65ebd1e45975bbcbbf513bafe272f033c7\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 300\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;name\&quot;: \&quot;Monday Morning Mood\&quot;,\n&quot; +&#10;        &quot;                \&quot;owner\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                        \&quot;spotify\&quot;: \&quot;http://open.spotify.com/user/spotify\&quot;\n&quot; +&#10;        &quot;                    },\n&quot; +&#10;        &quot;                    \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotify\&quot;,\n&quot; +&#10;        &quot;                    \&quot;id\&quot;: \&quot;spotify\&quot;,\n&quot; +&#10;        &quot;                    \&quot;type\&quot;: \&quot;user\&quot;,\n&quot; +&#10;        &quot;                    \&quot;uri\&quot;: \&quot;spotify:user:spotify\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;public\&quot;: null,\n&quot; +&#10;        &quot;                \&quot;snapshot_id\&quot;: \&quot;WwGvSIVUkUvGvqjgj/bQHlRycYmJ2TkoIxYfoalWlmIZT6TvsgvGMgtQ2dGbkrAW\&quot;,\n&quot; +&#10;        &quot;                \&quot;tracks\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotify/playlists/6ftJBzU2LLQcaKefMi7ee7/tracks\&quot;,\n&quot; +&#10;        &quot;                    \&quot;total\&quot;: 245\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;type\&quot;: \&quot;playlist\&quot;,\n&quot; +&#10;        &quot;                \&quot;uri\&quot;: \&quot;spotify:user:spotify:playlist:6ftJBzU2LLQcaKefMi7ee7\&quot;\n&quot; +&#10;        &quot;            },\n&quot; +&#10;        &quot;            {\n&quot; +&#10;        &quot;                \&quot;collaborative\&quot;: false,\n&quot; +&#10;        &quot;                \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;spotify\&quot;: \&quot;http://open.spotify.com/user/spotify__sverige/playlist/4uOEx4OUrkoGNZoIlWMUbO\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotify__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO\&quot;,\n&quot; +&#10;        &quot;                \&quot;id\&quot;: \&quot;4uOEx4OUrkoGNZoIlWMUbO\&quot;,\n&quot; +&#10;        &quot;                \&quot;images\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 300,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/24aa1d1b491dd529b9c03392f350740ed73438d8\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 300\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;name\&quot;: \&quot;Upp och hoppa!\&quot;,\n&quot; +&#10;        &quot;                \&quot;owner\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                        \&quot;spotify\&quot;: \&quot;http://open.spotify.com/user/spotify__sverige\&quot;\n&quot; +&#10;        &quot;                    },\n&quot; +&#10;        &quot;                    \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotify__sverige\&quot;,\n&quot; +&#10;        &quot;                    \&quot;id\&quot;: \&quot;spotify__sverige\&quot;,\n&quot; +&#10;        &quot;                    \&quot;type\&quot;: \&quot;user\&quot;,\n&quot; +&#10;        &quot;                    \&quot;uri\&quot;: \&quot;spotify:user:spotify__sverige\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;public\&quot;: null,\n&quot; +&#10;        &quot;                \&quot;snapshot_id\&quot;: \&quot;0j9Rcbt2KtCXEXKtKy/tnSL5r4byjDBOIVY1dn4S6GV73EEUgNuK2hU+QyDuNnXz\&quot;,\n&quot; +&#10;        &quot;                \&quot;tracks\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotify__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO/tracks\&quot;,\n&quot; +&#10;        &quot;                    \&quot;total\&quot;: 38\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;type\&quot;: \&quot;playlist\&quot;,\n&quot; +&#10;        &quot;                \&quot;uri\&quot;: \&quot;spotify:user:spotify__sverige:playlist:4uOEx4OUrkoGNZoIlWMUbO\&quot;\n&quot; +&#10;        &quot;            }\n&quot; +&#10;        &quot;        ],\n&quot; +&#10;        &quot;        \&quot;limit\&quot;: 20,\n&quot; +&#10;        &quot;        \&quot;next\&quot;: null,\n&quot; +&#10;        &quot;        \&quot;offset\&quot;: 0,\n&quot; +&#10;        &quot;        \&quot;previous\&quot;: null,\n&quot; +&#10;        &quot;        \&quot;total\&quot;: 2\n&quot; +&#10;        &quot;    }\n&quot; +&#10;        &quot;}&quot;.replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;&#10;    private String[] arguments = new String[]{&#10;        &quot;-access&quot;,&#10;        accessServerUrl,&#10;        &quot;-resource&quot;,&#10;        resourceServerUrl&#10;    };&#10;&#10;    private WebServerMock accessServer = new WebServerMock(accessServerPort)&#10;        .setPage(&quot;/api/token&quot;, tokenResponse);&#10;&#10;    private WebServerMock resourceServer = new WebServerMock(resourceServerPort)&#10;        .setPage(&quot;/v1/browse/categories&quot;, apiCategoriesResponse)&#10;        .setPage(&quot;/v1/browse/categories/party/playlists&quot;, apiPlaylistsPartyResponse)&#10;        .setPage(&quot;/v1/browse/new-releases&quot;, apiNewReleasesResponse)&#10;        .setPage(&quot;/v1/browse/featured-playlists&quot;, apiFeaturedPlaylistsResponse);&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;Attach&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\nexit&quot;)&#10;                .addArguments(arguments)&#10;                .runWith(accessServer)&#10;                .runWith(resourceServer)&#10;                .setAttach(new Attach(reply -&gt; {&#10;                    if (!reply.contains(&quot;Success!&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;There is no \&quot;Success!\&quot; after \&quot;auth\&quot; but should be&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;new\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;                    if (!reply.strip().startsWith(&quot;Please, provide access for application.&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;When no access provided you should output &quot; +&#10;                                &quot;\&quot;Please, provide access for application.\&quot;&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;featured\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;                    if (!reply.strip().startsWith(&quot;Please, provide access for application.&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;When no access provided you should output &quot; +&#10;                                &quot;\&quot;Please, provide access for application.\&quot;&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;categories\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;                    if (!reply.strip().startsWith(&quot;Please, provide access for application.&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;When no access provided you should output &quot; +&#10;                                &quot;\&quot;Please, provide access for application.\&quot;&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;playlists Party Time\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;                    if (!reply.strip().startsWith(&quot;Please, provide access for application.&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;When no access provided you should output &quot; +&#10;                                &quot;\&quot;Please, provide access for application.\&quot;&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\nnew\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;&#10;                    String album1 =&#10;                        &quot;Runnin'\n&quot; +&#10;                            &quot;[Drake]\n&quot; +&#10;                            &quot;https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    String album2 =&#10;                        &quot;Sneakin’\n&quot; +&#10;                            &quot;[Drake2]\n&quot; +&#10;                            &quot;https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    if (!reply.contains(album1) || !reply.contains(album2)) {&#10;                        return new CheckResult(false,&#10;                            &quot;There is no albums in correct format on \&quot;new\&quot; action&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\ncategories\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;&#10;                    String category1 = &quot;Top Lists&quot;;&#10;                    String category2 = &quot;Super Mood&quot;;&#10;                    String category3 = &quot;Party Time&quot;;&#10;&#10;                    if (!reply.contains(category1)&#10;                        || !reply.contains(category2)&#10;                        || ! reply.contains(category3)) {&#10;&#10;                        return new CheckResult(false,&#10;                            &quot;There is no categories in correct format on \&quot;category\&quot; action&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\nfeatured\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;&#10;                    String featured1 =&#10;                        &quot;Monday Morning Mood\n&quot; +&#10;                            &quot;http://open.spotify.com/user/spotify/playlist/6ftJBzU2LLQcaKefMi7ee7&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    String featured2 =&#10;                        &quot;Upp och hoppa!\n&quot; +&#10;                            &quot;http://open.spotify.com/user/spotify__sverige/playlist/4uOEx4OUrkoGNZoIlWMUbO&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    if (!reply.contains(featured1)&#10;                        || !reply.contains(featured2)) {&#10;&#10;                        return new CheckResult(false,&#10;                            &quot;There is no featured playlists in correct format on \&quot;featured\&quot; action&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\nplaylists Party Time\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;&#10;                    String playlist1 =&#10;                        &quot;Noite Eletrônica\n&quot; +&#10;                            &quot;http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    String playlist2 =&#10;                        &quot;Festa Indie\n&quot; +&#10;                            &quot;http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    if (!reply.contains(playlist1)&#10;                        || !reply.contains(playlist2)) {&#10;&#10;                        return new CheckResult(false,&#10;                            &quot;There is no playlists in correct format on \&quot;playlists {name}\&quot; action&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                }))&#10;&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, Attach clue) {&#10;        return clue.func.apply(reply);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/Main.java" />
                                <option name="text" value="package advisor;&#10;&#10;import advisor.manager.CommandManager;&#10;&#10;import java.io.FileInputStream;&#10;import java.io.FileNotFoundException;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.net.URL;&#10;import java.util.Arrays;&#10;import java.util.Properties;&#10;import java.util.Scanner;&#10;&#10;public class Main {&#10;&#10;    CommandManager commandManager;&#10;    Properties appConfig;&#10;&#10;    public Main() {&#10;        Scanner scanner = new Scanner(System.in);&#10;        this.commandManager = new CommandManager(scanner);&#10;        //this.appConfig = loadConfig();&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        Main application = new Main();&#10;        application.start();&#10;    }&#10;&#10;    public void start() {&#10;        commandManager.executeLine();&#10;    }&#10;&#10;    private Properties loadConfig() {&#10;        Properties appConfig = new Properties();&#10;        try {&#10;            // load the properties file using load() and an input stream&#10;            //FileInputStream in = new FileInputStream(&quot;resources/config.properties&quot;);&#10;            ClassLoader classLoader = getClass().getClassLoader();&#10;            URL resource = classLoader.getResource(&quot;/Music Advisor/task/src/advisor/config.properties&quot;);&#10;&#10;            System.out.println(resource);&#10;            System.out.println(&quot;----------------------------&quot;);&#10;&#10;            InputStream in = getClass()&#10;                    .getClassLoader().getResourceAsStream(&quot;/config.properties&quot;);&#10;            appConfig.load(in);&#10;            in.close();&#10;&#10;            appConfig.list(System.out);&#10;&#10;&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;&#10;        return appConfig;&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="build.gradle">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="build.gradle" />
                                <option name="text" value="apply plugin: 'java'&#10;apply plugin: 'application'&#10;&#10;group 'advisor'&#10;version '1.0-SNAPSHOT'&#10;&#10;sourceCompatibility = 11&#10;mainClassName = 'advisor.Main'&#10;&#10;repositories {&#10;    mavenCentral()&#10;}&#10;&#10;dependencies {&#10;    compile 'com.google.code.gson:gson:+'&#10;}&#10;&#10;jar {&#10;    manifest {&#10;        attributes 'Main-Class' : 'advisor.Main'&#10;    }&#10;    from {&#10;        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/manager/CommandManager.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/manager/CommandManager.java" />
                                <option name="text" value="package advisor.manager;&#10;&#10;import advisor.command.Command;&#10;import advisor.command.CommandFactory;&#10;import advisor.exception.InvalidInputException;&#10;import advisor.service.SpotifyService;&#10;&#10;import java.util.Scanner;&#10;&#10;public class CommandManager {&#10;&#10;    CommandFactory commandFactory;&#10;    Scanner scanner;&#10;    boolean getNextLine = true;&#10;&#10;    boolean userLogged = false;&#10;&#10;    public CommandManager(Scanner scanner) {&#10;        this.scanner = scanner;&#10;        this.commandFactory = new CommandFactory();&#10;    }&#10;&#10;    public void executeLine()&#10;    {&#10;        String nextLine = getNextLine();&#10;        if (!nextLine.isEmpty()) {&#10;&#10;            try {&#10;                startCommand(nextLine);&#10;            } catch (Exception e) {&#10;                System.out.println(e.getMessage());&#10;&#10;            }&#10;        }&#10;&#10;        if (getNextLine) {&#10;            executeLine();&#10;        }&#10;    }&#10;&#10;    private void startCommand(String line) throws InvalidInputException {&#10;        Command command = commandFactory.getCommand(line);&#10;        if (!command.isLoginRequired() || (command.isLoginRequired() &amp;&amp; SpotifyService.isUserLogged())) {&#10;            command.handle();&#10;        }&#10;        else {&#10;            System.out.println(&quot;Please, provide access for application.&quot;);&#10;        }&#10;&#10;        if (command.isExitCommand()) {&#10;            getNextLine = false;&#10;        }&#10;    }&#10;&#10;    private String getNextLine() {&#10;        return scanner.nextLine();&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/HelpCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/command/HelpCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class HelpCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String helpMessage = &quot;The program calculates the sum of numbers //n - calculator support the addition + and subtraction - operators&quot;;&#10;&#10;    @Override&#10;    public void handle() {&#10;        System.out.println(helpMessage);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/Command.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/Command.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public abstract class Command {&#10;&#10;    protected boolean exitCommand = false;&#10;&#10;    protected boolean loginRequired = true;&#10;&#10;    public abstract void handle();&#10;&#10;    public boolean isLoginRequired() {&#10;        return loginRequired;&#10;    }&#10;&#10;    public boolean isExitCommand() {&#10;        return exitCommand;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/ExitCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/ExitCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class ExitCommand extends Command{&#10;&#10;    public ExitCommand() {&#10;        this.exitCommand = true;&#10;    }&#10;&#10;    @Override&#10;    public void handle() {&#10;        System.out.println(&quot;---GOODBYE!---&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/CommandFactory.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/CommandFactory.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;import advisor.exception.InvalidInputException;&#10;&#10;public class CommandFactory {&#10;&#10;    private final String unknownMessage = &quot;Unknown command&quot;;&#10;    private final String missingParameterMessage = &quot;Missing Parameter&quot;;&#10;&#10;    private final String playlistsCommand = &quot;playlists&quot;;&#10;    private final String newCommand = &quot;new&quot;;&#10;    private final String featuredCommand = &quot;featured&quot;;&#10;    private final String categoriesCommand = &quot;categories&quot;;&#10;    private final String helpCommand = &quot;help&quot;;&#10;    private final String stopCommand = &quot;exit&quot;;&#10;    private final String authCommand = &quot;auth&quot;;&#10;&#10;    public Command getCommand(String commandLine) throws InvalidInputException {&#10;&#10;        String[] parts = commandLine.split(&quot;\\s&quot;, 2);&#10;        String textCommand = parts[0];&#10;&#10;        String parameters = null;&#10;        if (parts.length &gt; 1 ) {&#10;            parameters = parts[1];&#10;        }&#10;&#10;        Command command;&#10;        switch (textCommand) {&#10;            case helpCommand:&#10;                command = new HelpCommand();&#10;                break;&#10;            case stopCommand:&#10;                command = new ExitCommand();&#10;                break;&#10;            case featuredCommand:&#10;                command = new FeaturedCommand();&#10;                break;&#10;            case newCommand:&#10;                command = new NewCommand();&#10;                break;&#10;            case categoriesCommand:&#10;                command = new CategoriesCommand();&#10;                break;&#10;            case authCommand:&#10;                command = new AuthCommand();&#10;                break;&#10;            case playlistsCommand:&#10;                if (parameters == null) {&#10;                    throw new InvalidInputException(missingParameterMessage);&#10;                }&#10;                command = new PlaylistsCommand(parameters);&#10;                break;&#10;            default:&#10;                throw new InvalidInputException(unknownMessage + &quot; &quot; + textCommand);&#10;        }&#10;&#10;&#10;        return command;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/exception/InvalidInputException.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/exception/InvalidInputException.java" />
                                <option name="text" value="package advisor.exception;&#10;&#10;public class InvalidInputException extends Exception {&#10;&#10;    public InvalidInputException(String errorMessage) {&#10;        super(errorMessage);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/FeaturedCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/command/FeaturedCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class FeaturedCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String title = &quot;---FEATURED---&quot;;&#10;    private String message = &quot;Mellow Morning\n&quot; +&#10;            &quot;Wake Up and Smell the Coffee\n&quot; +&#10;            &quot;Monday Motivation\n&quot; +&#10;            &quot;Songs to Sing in the Shower&quot;;&#10;&#10;    @Override&#10;    public void handle() {&#10;&#10;        System.out.println(title);&#10;&#10;        System.out.println(message);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/NewCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/command/NewCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class NewCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String title = &quot;---NEW RELEASES---&quot;;&#10;    private String message = &quot;Mountains [Sia, Diplo, Labrinth]\n&quot; +&#10;            &quot;Runaway [Lil Peep]\n&quot; +&#10;            &quot;The Greatest Show [Panic! At The Disco]\n&quot; +&#10;            &quot;All Out Life [Slipknot]&quot;;&#10;&#10;    @Override&#10;    public void handle() {&#10;&#10;        System.out.println(title);&#10;        System.out.println(message);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/CategoriesCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/command/CategoriesCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class CategoriesCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String title = &quot;---CATEGORIES---&quot;;&#10;    private String message =  &quot;Top Lists\n&quot; +&#10;            &quot;Pop\n&quot; +&#10;            &quot;Mood\n&quot; +&#10;            &quot;Latin&quot;;&#10;&#10;    @Override&#10;    public void handle() {&#10;&#10;        System.out.println(title);&#10;        System.out.println(message);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/PlaylistsCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/command/PlaylistsCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class PlaylistsCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String categoryName;&#10;&#10;    private String title = &quot;---C_NAME PLAYLISTS---&quot;;&#10;    private String message =  &quot;Mountains [Sia, Diplo, Labrinth]\n&quot; +&#10;            &quot;Runaway [Lil Peep]\n&quot; +&#10;            &quot;The Greatest Show [Panic! At The Disco]\n&quot; +&#10;            &quot;All Out Life [Slipknot]&quot;;&#10;&#10;&#10;    public PlaylistsCommand(String parametersString) {&#10;        this.categoryName = parametersString;&#10;        title = title.replaceAll(&quot;C_NAME&quot;, this.categoryName.toUpperCase());&#10;    }&#10;&#10;    @Override&#10;    public void handle() {&#10;&#10;        System.out.println(title);&#10;        System.out.println(message);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/AuthCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/command/AuthCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;import advisor.service.SpotifyService;&#10;&#10;public class AuthCommand extends Command{&#10;&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private SpotifyService spotifyService;&#10;&#10;    private String title = &quot;&quot;;&#10;    private String message =  &quot;&quot;;&#10;&#10;    public AuthCommand() {&#10;        this.loginRequired = false;&#10;        spotifyService = new SpotifyService();&#10;    }&#10;&#10;    @Override&#10;    public void handle() {&#10;&#10;        System.out.println(spotifyService.getAuthorizationUrl());&#10;        System.out.println(&quot;---SUCCESS---&quot;);&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/service/SpotifyService.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/service/SpotifyService.java" />
                                <option name="text" value="package advisor.service;&#10;&#10;public class SpotifyService {&#10;&#10;    private static String redirect_uri = &quot;https://www.example.com&amp;response_type=code&quot;;&#10;    private static String uri = &quot;https://accounts.spotify.com/authorize?&quot;;&#10;    private static String client_id = &quot;3c1f0675fb224be6807fdd578f1d84cb&quot;;&#10;    private static String client_secret = &quot;97cdf492b8934099a263ddd75f02d3ca&quot;;&#10;&#10;&#10;    private static boolean userLogged = false;&#10;&#10;    public static boolean isUserLogged() {&#10;        return userLogged;&#10;    }&#10;&#10;    public String getAuthorizationUrl() {&#10;&#10;        StringBuilder authUrl = new StringBuilder();&#10;        authUrl.append(uri)&#10;                .append(&quot;client_id=&quot;).append(client_id)&#10;                .append(&quot;&amp;&quot;).append(&quot;redirect_uri=&quot;).append(redirect_uri);&#10;&#10;        //for now change flag right after gen auth link&#10;        userLogged = true;&#10;&#10;        return authUrl.toString();&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/resources/config.properties">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/resources/config.properties" />
                                <option name="text" value="service.spotify.url = https://accounts.spotify.com/authorize?&#10;service.spotify.redirect_uri = https://www.example.com&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/resources/config.properties">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/resources/config.properties" />
                                <option name="text" value="service.spotify.url = https://accounts.spotify.com/authorize?&#10;service.spotify.redirect_uri = https://www.example.com&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/config.properties">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/config.properties" />
                                <option name="text" value="service.spotify.url = https://accounts.spotify.com/authorize?&#10;service.spotify.redirect_uri = https://www.example.com&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/request/AbstractRequest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/request/AbstractRequest.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/request/AuthRequest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/request/AuthRequest.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/request/NewReleasesRequest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/request/NewReleasesRequest.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/object/Albums.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/object/Albums.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/object/Artist.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/object/Artist.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/object/ExternalUrls.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/object/ExternalUrls.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/object/Image.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/object/Image.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/object/Item.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/object/Item.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/object/ResponseWrapper.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/object/ResponseWrapper.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/request/FeaturedRequest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/request/FeaturedRequest.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/object/PlaylistWrapper.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/object/PlaylistWrapper.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/object/PlaylistItem.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/object/PlaylistItem.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/object/Owner.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/object/Owner.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/object/Playlists.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/object/Playlists.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/object/Tracks.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/object/Tracks.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/request/CategoriesRequest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/request/CategoriesRequest.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/object/Categories.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/object/Categories.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/object/CategoriesWrapper.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/object/CategoriesWrapper.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/object/CategoriesItem.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/object/CategoriesItem.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/request/CategoriesPlaylistsRequest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/advisor/request/CategoriesPlaylistsRequest.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1561937181000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Since the results can take up many lines, sometimes it is not convenient to see the whole result at once, and you might want to see everything separately. In this stage, you will need to reorganize your application and add paginated output.&lt;br&gt;&#10;  &lt;br&gt;&#10;  MVC (Model View Controller) is an architectural pattern for building an application. Using this pattern we achieve separation of data and presentation, scalability, and maintainability. The main concept of MVC - the division of the program into three parts - Model (or just data), which is manipulated by the user performing various actions. Controller - receives these actions from the user and interprets them, changes the model and updates the view. The view determines how the elements on the screen will be displayed, what text they will have, indents, etc.&lt;/p&gt;&#10;&#10;&lt;ol&gt;&#10;  &lt;li&gt;The user makes some actions that Controller intercepts.&lt;/li&gt;&#10;  &lt;li&gt;The controller manipulates the Model according to the user’s request.&lt;/li&gt;&#10;  &lt;li&gt;Then the Controller updates the View that the user sees.&lt;/li&gt;&#10;&lt;/ol&gt;&#10;&#10;&lt;p&gt;It is a passive view realization of MVC (full description &lt;a href=&quot;https://martinfowler.com/eaaDev/PassiveScreen.html&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;img alt=&quot;&quot; height=&quot;390&quot; src=&quot;https://ucarecdn.com/cc70612a-aa89-4812-b4bd-3380c4b33b41/&quot; width=&quot;333&quot;&gt;&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;According to the MVC pattern, reorganize your application into three components (the controller should read input and make requests to the API and update the view) and create a paginated output that will display 5 entries per page. You should be able to navigate through the pages using the commands &lt;code&gt;next&lt;/code&gt; (see the next page) and &lt;code&gt;prev&lt;/code&gt; (see the previous page). If the user is viewing the last page or the first one and calls next or prev, then you need to display a message that there are no more pages. Also, under each output should be a message containing the number of the current page and how many total pages there are.&lt;/p&gt;&#10;&#10;&lt;p&gt;Don't forget about &lt;code&gt;-access&lt;/code&gt; and &lt;code&gt;-resource&lt;/code&gt; arguments and add another argument - a number of entries that should be shown on a page. Your program should process argument &lt;code&gt;-page&lt;/code&gt;. If ths argument isn't set you should use defaulf value - 5.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Below is an output example of the described program. Try to output all cases like in the example.&lt;br&gt;&#10;  The lines that start with &lt;code&gt;&amp;gt;&lt;/code&gt; represent the user input.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;&amp;gt; new&#10;Please, provide access for application.&#10;&amp;gt; auth&#10;making http request for access_token…&#10;Success!&#10;&amp;gt; new&#10;OT ALL HEROES WEAR CAPES&#10;[Metro Boomin, Travis Scott, 21 Savage]&#10;https://open.spotify.com/album/1zNr37qd3iZJ899byrTkcj&#10;&#10;I Used To Know Her - Part 2 - EP&#10;[H.E.R.]&#10;https://open.spotify.com/album/46imFLgb9fR1Io6EoPYeQh&#10;&#10;The Last Rocket&#10;[Takeoff]&#10;https://open.spotify.com/album/5XRCcUfwtLNQflDd9cfz4U&#10;&#10;Interstate Gospel&#10;[Pistol Annies]&#10;https://open.spotify.com/album/0IXxmmlfSQxgJNWnNjHhgJ&#10;&#10;El Mal Querer&#10;[ROSALÍA]&#10;https://open.spotify.com/album/355bjCHzRJztCzaG5Za4gq&#10;&#10;---PAGE 1 of 5---&#10;&amp;gt; next&#10;Mountains&#10;[Sia, Diplo, Labrinth]&#10;https://open.spotify.com/album/3dB0bCgmpEgCSr3aU1bOtv&#10;&#10;Pussy Is God&#10;[King Princess]&#10;https://open.spotify.com/album/4UzCY6ikiEN4rgY26I4jg0&#10;&#10;Shootin Shots (feat. Ty Dolla $ign &amp;amp; Tory Lanez)&#10;[Trey Songz, Ty Dolla $ign]&#10;https://open.spotify.com/album/6Erhbwa5HmDwuzYacUpLPr&#10;&#10;Runaway&#10;[Lil Peep]&#10;https://open.spotify.com/album/38sesm68q3lg21o6Lpzslc&#10;&#10;RESET&#10;[Moneybagg Yo]&#10;https://open.spotify.com/album/547DJFUYOl2SBYJbo2jZX1&#10;&#10;---PAGE 2 OF 5---&#10;&amp;gt; categories&#10;Top Lists&#10;Mood&#10;Chill&#10;Hip-Hop&#10;Electronic/Dance&#10;---PAGE 1 OF 10---&#10;&amp;gt; next&#10;Kids &amp;amp; Family&#10;Rock&#10;Indie&#10;Happy Holidays&#10;Workout&#10;---PAGE 2 OF 10---&#10;&amp;gt; exit&lt;/code&gt;&lt;/pre&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/62/stages/339/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5481" />
                      <option name="index" value="5" />
                      <option name="name" value="Final chords" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="test/MusicAdvisorTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/MusicAdvisorTest.java" />
                                <option name="text" value="import advisor.Main;&#10;&#10;import org.hyperskill.hstest.v5.mocks.web.WebServerMock;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;&#10;import java.util.List;&#10;import java.util.function.Function;&#10;&#10;class Attach {&#10;    Function&lt;String, CheckResult&gt; func;&#10;&#10;    Attach(Function&lt;String, CheckResult&gt; func) {&#10;        this.func = func;&#10;    }&#10;}&#10;&#10;public class MusicAdvisorTest extends BaseStageTest&lt;Attach&gt; {&#10;    public MusicAdvisorTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    private int countAppearances(String str, String findStr) {&#10;        int lastIndex = 0;&#10;        int count = 0;&#10;&#10;        while(lastIndex != -1){&#10;&#10;            lastIndex = str.indexOf(findStr,lastIndex);&#10;&#10;            if(lastIndex != -1){&#10;                count ++;&#10;                lastIndex += findStr.length();&#10;            }&#10;        }&#10;        return count;&#10;    }&#10;&#10;    private String accessToken = &quot;21BSZ1CA3KR0cf0LxmiNK_E87ZqnkJ3DD89VOWAZ9f0aXJcsCiH7l5Om-EVhkIfwt1AZs5WeXgfEF69e4JqL3YX1IIW9zl91egTmgLkb4xLXWwhryty478CLoL2SM9VIY6HaHgxYxdmRFGWSzrgH3yEqcvPoLpd26D8Y&quot;;&#10;&#10;    private String refreshToken = &quot;AQCSmdQsvsvpneadsdq1brfKlbEWleTE3nprDwPbZgNSge5dVe_svYBG-RG-_PxIGxVvA7gSnehFJjDRAczLDbbdWPjW1yUq2gtKbbNrCQVAH5ZBtY8wAYskmOIW7zn3IEiBzg&quot;;&#10;&#10;    private String tokenResponse = &quot;{&quot; +&#10;        &quot;\&quot;access_token\&quot;:\&quot;&quot; + accessToken + &quot;\&quot;,&quot; +&#10;        &quot;\&quot;token_type\&quot;:\&quot;Bearer\&quot;,&quot; +&#10;        &quot;\&quot;expires_in\&quot;:3600,&quot; +&#10;        &quot;\&quot;refresh_token\&quot;:&quot; + &quot;\&quot;&quot; + refreshToken + &quot;\&quot;,&quot; +&#10;        &quot;\&quot;scope\&quot;:\&quot;\&quot;&quot; +&#10;        &quot;}&quot;;&#10;&#10;    private int accessServerPort = 45678;&#10;    private int resourceServerPort = 56789;&#10;&#10;    private String accessServerUrl = &quot;http://127.0.0.1:&quot; + accessServerPort;&#10;    private String resourceServerUrl = &quot;http://127.0.0.1:&quot; + resourceServerPort;&#10;    private String spotifyServerUrl = &quot;https://api\\.spotify\\.com&quot;;&#10;&#10;    private String apiCategoriesResponse = &quot;{\n&quot; +&#10;        &quot;    \&quot;categories\&quot;: {\n&quot; +&#10;        &quot;        \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/browse/categories?offset=0&amp;limit=20\&quot;,\n&quot; +&#10;        &quot;        \&quot;items\&quot;: [\n&quot; +&#10;        &quot;            {\n&quot; +&#10;        &quot;                \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/browse/categories/toplists\&quot;,\n&quot; +&#10;        &quot;                \&quot;icons\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 275,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://datsnxq1rwndn.cloudfront.net/media/derived/toplists_11160599e6a04ac5d6f2757f5511778f_0_0_275_275.jpg\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 275\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;id\&quot;: \&quot;toplists\&quot;,\n&quot; +&#10;        &quot;                \&quot;name\&quot;: \&quot;Top Lists\&quot;\n&quot; +&#10;        &quot;            },\n&quot; +&#10;        &quot;            {\n&quot; +&#10;        &quot;                \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/browse/categories/mood\&quot;,\n&quot; +&#10;        &quot;                \&quot;icons\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 274,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://datsnxq1rwndn.cloudfront.net/media/original/mood-274x274_976986a31ac8c49794cbdc7246fd5ad7_274x274.jpg\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 274\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;id\&quot;: \&quot;mood\&quot;,\n&quot; +&#10;        &quot;                \&quot;name\&quot;: \&quot;Super Mood\&quot;\n&quot; +&#10;        &quot;            },\n&quot; +&#10;        &quot;            {\n&quot; +&#10;        &quot;                \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/browse/categories/party\&quot;,\n&quot; +&#10;        &quot;                \&quot;icons\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 274,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://datsnxq1rwndn.cloudfront.net/media/derived/party-274x274_73d1907a7371c3bb96a288390a96ee27_0_0_274_274.jpg\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 274\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;id\&quot;: \&quot;party\&quot;,\n&quot; +&#10;        &quot;                \&quot;name\&quot;: \&quot;Party Time\&quot;\n&quot; +&#10;        &quot;            }\n&quot; +&#10;        &quot;        ],\n&quot; +&#10;        &quot;        \&quot;limit\&quot;: 20,\n&quot; +&#10;        &quot;        \&quot;next\&quot;: null,\n&quot; +&#10;        &quot;        \&quot;offset\&quot;: 0,\n&quot; +&#10;        &quot;        \&quot;previous\&quot;: null,\n&quot; +&#10;        &quot;        \&quot;total\&quot;: 3\n&quot; +&#10;        &quot;    }\n&quot; +&#10;        &quot;}&quot;.replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;&#10;    private String apiPlaylistsPartyResponse = &quot;{\n&quot; +&#10;        &quot;    \&quot;playlists\&quot;: {\n&quot; +&#10;        &quot;        \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/browse/categories/party/playlists?offset=0&amp;limit=20\&quot;,\n&quot; +&#10;        &quot;        \&quot;items\&quot;: [\n&quot; +&#10;        &quot;            {\n&quot; +&#10;        &quot;                \&quot;collaborative\&quot;: false,\n&quot; +&#10;        &quot;                \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;spotify\&quot;: \&quot;http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotifybrazilian/playlists/4k7EZPI3uKMz4aRRrLVfen\&quot;,\n&quot; +&#10;        &quot;                \&quot;id\&quot;: \&quot;4k7EZPI3uKMz4aRRrLVfen\&quot;,\n&quot; +&#10;        &quot;                \&quot;images\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 300,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/bf6544c213532e9650088dfef76c8521093d970e\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 300\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;name\&quot;: \&quot;Noite Eletrônica\&quot;,\n&quot; +&#10;        &quot;                \&quot;owner\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                        \&quot;spotify\&quot;: \&quot;http://open.spotify.com/user/spotifybrazilian\&quot;\n&quot; +&#10;        &quot;                    },\n&quot; +&#10;        &quot;                    \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotifybrazilian\&quot;,\n&quot; +&#10;        &quot;                    \&quot;id\&quot;: \&quot;spotifybrazilian\&quot;,\n&quot; +&#10;        &quot;                    \&quot;type\&quot;: \&quot;user\&quot;,\n&quot; +&#10;        &quot;                    \&quot;uri\&quot;: \&quot;spotify:user:spotifybrazilian\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;public\&quot;: null,\n&quot; +&#10;        &quot;                \&quot;snapshot_id\&quot;: \&quot;PULvu1V2Ps8lzCxNXfNZTw4QbhBpaV0ZORc03Mw6oj6kQw9Ks2REwhL5Xcw/74wL\&quot;,\n&quot; +&#10;        &quot;                \&quot;tracks\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotifybrazilian/playlists/4k7EZPI3uKMz4aRRrLVfen/tracks\&quot;,\n&quot; +&#10;        &quot;                    \&quot;total\&quot;: 100\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;type\&quot;: \&quot;playlist\&quot;,\n&quot; +&#10;        &quot;                \&quot;uri\&quot;: \&quot;spotify:user:spotifybrazilian:playlist:4k7EZPI3uKMz4aRRrLVfen\&quot;\n&quot; +&#10;        &quot;            },\n&quot; +&#10;        &quot;            {\n&quot; +&#10;        &quot;                \&quot;collaborative\&quot;: false,\n&quot; +&#10;        &quot;                \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;spotify\&quot;: \&quot;http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotifybrazilian/playlists/4HZh0C9y80GzHDbHZyX770\&quot;,\n&quot; +&#10;        &quot;                \&quot;id\&quot;: \&quot;4HZh0C9y80GzHDbHZyX770\&quot;,\n&quot; +&#10;        &quot;                \&quot;images\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 300,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/be6c333146674440123073cb32c1c8b851e69023\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 300\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;name\&quot;: \&quot;Festa Indie\&quot;,\n&quot; +&#10;        &quot;                \&quot;owner\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                        \&quot;spotify\&quot;: \&quot;http://open.spotify.com/user/spotifybrazilian\&quot;\n&quot; +&#10;        &quot;                    },\n&quot; +&#10;        &quot;                    \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotifybrazilian\&quot;,\n&quot; +&#10;        &quot;                    \&quot;id\&quot;: \&quot;spotifybrazilian\&quot;,\n&quot; +&#10;        &quot;                    \&quot;type\&quot;: \&quot;user\&quot;,\n&quot; +&#10;        &quot;                    \&quot;uri\&quot;: \&quot;spotify:user:spotifybrazilian\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;public\&quot;: null,\n&quot; +&#10;        &quot;                \&quot;snapshot_id\&quot;: \&quot;V66hh9k2HnLCdzHvtoXPv+tm0jp3ODM63SZ0oISfGnlHQxwG/scupDbKgIo99Zfz\&quot;,\n&quot; +&#10;        &quot;                \&quot;tracks\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotifybrazilian/playlists/4HZh0C9y80GzHDbHZyX770/tracks\&quot;,\n&quot; +&#10;        &quot;                    \&quot;total\&quot;: 74\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;type\&quot;: \&quot;playlist\&quot;,\n&quot; +&#10;        &quot;                \&quot;uri\&quot;: \&quot;spotify:user:spotifybrazilian:playlist:4HZh0C9y80GzHDbHZyX770\&quot;\n&quot; +&#10;        &quot;            }\n&quot; +&#10;        &quot;        ],\n&quot; +&#10;        &quot;        \&quot;limit\&quot;: 20,\n&quot; +&#10;        &quot;        \&quot;next\&quot;: null,\n&quot; +&#10;        &quot;        \&quot;offset\&quot;: 0,\n&quot; +&#10;        &quot;        \&quot;previous\&quot;: null,\n&quot; +&#10;        &quot;        \&quot;total\&quot;: 2\n&quot; +&#10;        &quot;    }\n&quot; +&#10;        &quot;}&quot;.replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;&#10;    private String apiNewReleasesResponse = &quot;{\n&quot; +&#10;        &quot;    \&quot;albums\&quot;: {\n&quot; +&#10;        &quot;        \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/browse/new-releases?offset=0&amp;limit=20\&quot;,\n&quot; +&#10;        &quot;        \&quot;items\&quot;: [\n&quot; +&#10;        &quot;            {\n&quot; +&#10;        &quot;                \&quot;album_type\&quot;: \&quot;single\&quot;,\n&quot; +&#10;        &quot;                \&quot;artists\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                            \&quot;spotify\&quot;: \&quot;https://open.spotify.com/artist/2RdwBSPQiwcmiDo9kixcl8\&quot;\n&quot; +&#10;        &quot;                        },\n&quot; +&#10;        &quot;                        \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/artists/2RdwBSPQiwcmiDo9kixcl8\&quot;,\n&quot; +&#10;        &quot;                        \&quot;id\&quot;: \&quot;2RdwBSPQiwcmiDo9kixcl8\&quot;,\n&quot; +&#10;        &quot;                        \&quot;name\&quot;: \&quot;Pharrell Williams\&quot;,\n&quot; +&#10;        &quot;                        \&quot;type\&quot;: \&quot;artist\&quot;,\n&quot; +&#10;        &quot;                        \&quot;uri\&quot;: \&quot;spotify:artist:2RdwBSPQiwcmiDo9kixcl8\&quot;\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;available_markets\&quot;: [\n&quot; +&#10;        &quot;                    \&quot;AD\&quot;\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;spotify\&quot;: \&quot;https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/albums/5ZX4m5aVSmWQ5iHAPQpT71\&quot;,\n&quot; +&#10;        &quot;                \&quot;id\&quot;: \&quot;5ZX4m5aVSmWQ5iHAPQpT71\&quot;,\n&quot; +&#10;        &quot;                \&quot;images\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 640,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/e6b635ebe3ef4ba22492f5698a7b5d417f78b88a\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 640\n&quot; +&#10;        &quot;                    },\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 300,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/92ae5b0fe64870c09004dd2e745a4fb1bf7de39d\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 300\n&quot; +&#10;        &quot;                    },\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 64,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/8a7ab6fc2c9f678308ba0f694ecd5718dc6bc930\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 64\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;name\&quot;: \&quot;Runnin'\&quot;,\n&quot; +&#10;        &quot;                \&quot;type\&quot;: \&quot;album\&quot;,\n&quot; +&#10;        &quot;                \&quot;uri\&quot;: \&quot;spotify:album:5ZX4m5aVSmWQ5iHAPQpT71\&quot;\n&quot; +&#10;        &quot;            },\n&quot; +&#10;        &quot;            {\n&quot; +&#10;        &quot;                \&quot;album_type\&quot;: \&quot;single\&quot;,\n&quot; +&#10;        &quot;                \&quot;artists\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                            \&quot;spotify\&quot;: \&quot;https://open.spotify.com/artist/3TVXtAsR1Inumwj472S9r4\&quot;\n&quot; +&#10;        &quot;                        },\n&quot; +&#10;        &quot;                        \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/artists/3TVXtAsR1Inumwj472S9r4\&quot;,\n&quot; +&#10;        &quot;                        \&quot;id\&quot;: \&quot;3TVXtAsR1Inumwj472S9r4\&quot;,\n&quot; +&#10;        &quot;                        \&quot;name\&quot;: \&quot;Drake2\&quot;,\n&quot; +&#10;        &quot;                        \&quot;type\&quot;: \&quot;artist\&quot;,\n&quot; +&#10;        &quot;                        \&quot;uri\&quot;: \&quot;spotify:artist:3TVXtAsR1Inumwj472S9r4\&quot;\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;available_markets\&quot;: [\n&quot; +&#10;        &quot;                    \&quot;AD\&quot;\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;spotify\&quot;: \&quot;https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/albums/0geTzdk2InlqIoB16fW9Nd\&quot;,\n&quot; +&#10;        &quot;                \&quot;id\&quot;: \&quot;0geTzdk2InlqIoB16fW9Nd\&quot;,\n&quot; +&#10;        &quot;                \&quot;images\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 640,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/d40e9c3d22bde2fbdb2ecc03cccd7a0e77f42e4c\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 640\n&quot; +&#10;        &quot;                    },\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 300,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/dff06a3375f6d9b32ecb081eb9a60bbafecb5731\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 300\n&quot; +&#10;        &quot;                    },\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 64,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/808a02bd7fc59b0652c9df9f68675edbffe07a79\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 64\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;name\&quot;: \&quot;Sneakin’\&quot;,\n&quot; +&#10;        &quot;                \&quot;type\&quot;: \&quot;album\&quot;,\n&quot; +&#10;        &quot;                \&quot;uri\&quot;: \&quot;spotify:album:0geTzdk2InlqIoB16fW9Nd\&quot;\n&quot; +&#10;        &quot;            }\n&quot; +&#10;        &quot;        ],\n&quot; +&#10;        &quot;        \&quot;limit\&quot;: 20,\n&quot; +&#10;        &quot;        \&quot;next\&quot;: null,\n&quot; +&#10;        &quot;        \&quot;offset\&quot;: 0,\n&quot; +&#10;        &quot;        \&quot;previous\&quot;: null,\n&quot; +&#10;        &quot;        \&quot;total\&quot;: 2\n&quot; +&#10;        &quot;    }\n&quot; +&#10;        &quot;}&quot;.replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;&#10;    private String apiFeaturedPlaylistsResponse = &quot;{\n&quot; +&#10;        &quot;    \&quot;message\&quot;: \&quot;Monday morning music, coming right up!\&quot;,\n&quot; +&#10;        &quot;    \&quot;playlists\&quot;: {\n&quot; +&#10;        &quot;        \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/browse/featured-playlists?offset=0&amp;limit=20\&quot;,\n&quot; +&#10;        &quot;        \&quot;items\&quot;: [\n&quot; +&#10;        &quot;            {\n&quot; +&#10;        &quot;                \&quot;collaborative\&quot;: false,\n&quot; +&#10;        &quot;                \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;spotify\&quot;: \&quot;http://open.spotify.com/user/spotify/playlist/6ftJBzU2LLQcaKefMi7ee7\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotify/playlists/6ftJBzU2LLQcaKefMi7ee7\&quot;,\n&quot; +&#10;        &quot;                \&quot;id\&quot;: \&quot;6ftJBzU2LLQcaKefMi7ee7\&quot;,\n&quot; +&#10;        &quot;                \&quot;images\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 300,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/7bd33c65ebd1e45975bbcbbf513bafe272f033c7\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 300\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;name\&quot;: \&quot;Monday Morning Mood\&quot;,\n&quot; +&#10;        &quot;                \&quot;owner\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                        \&quot;spotify\&quot;: \&quot;http://open.spotify.com/user/spotify\&quot;\n&quot; +&#10;        &quot;                    },\n&quot; +&#10;        &quot;                    \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotify\&quot;,\n&quot; +&#10;        &quot;                    \&quot;id\&quot;: \&quot;spotify\&quot;,\n&quot; +&#10;        &quot;                    \&quot;type\&quot;: \&quot;user\&quot;,\n&quot; +&#10;        &quot;                    \&quot;uri\&quot;: \&quot;spotify:user:spotify\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;public\&quot;: null,\n&quot; +&#10;        &quot;                \&quot;snapshot_id\&quot;: \&quot;WwGvSIVUkUvGvqjgj/bQHlRycYmJ2TkoIxYfoalWlmIZT6TvsgvGMgtQ2dGbkrAW\&quot;,\n&quot; +&#10;        &quot;                \&quot;tracks\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotify/playlists/6ftJBzU2LLQcaKefMi7ee7/tracks\&quot;,\n&quot; +&#10;        &quot;                    \&quot;total\&quot;: 245\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;type\&quot;: \&quot;playlist\&quot;,\n&quot; +&#10;        &quot;                \&quot;uri\&quot;: \&quot;spotify:user:spotify:playlist:6ftJBzU2LLQcaKefMi7ee7\&quot;\n&quot; +&#10;        &quot;            },\n&quot; +&#10;        &quot;            {\n&quot; +&#10;        &quot;                \&quot;collaborative\&quot;: false,\n&quot; +&#10;        &quot;                \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;spotify\&quot;: \&quot;http://open.spotify.com/user/spotify__sverige/playlist/4uOEx4OUrkoGNZoIlWMUbO\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotify__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO\&quot;,\n&quot; +&#10;        &quot;                \&quot;id\&quot;: \&quot;4uOEx4OUrkoGNZoIlWMUbO\&quot;,\n&quot; +&#10;        &quot;                \&quot;images\&quot;: [\n&quot; +&#10;        &quot;                    {\n&quot; +&#10;        &quot;                        \&quot;height\&quot;: 300,\n&quot; +&#10;        &quot;                        \&quot;url\&quot;: \&quot;https://i.scdn.co/image/24aa1d1b491dd529b9c03392f350740ed73438d8\&quot;,\n&quot; +&#10;        &quot;                        \&quot;width\&quot;: 300\n&quot; +&#10;        &quot;                    }\n&quot; +&#10;        &quot;                ],\n&quot; +&#10;        &quot;                \&quot;name\&quot;: \&quot;Upp och hoppa!\&quot;,\n&quot; +&#10;        &quot;                \&quot;owner\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;external_urls\&quot;: {\n&quot; +&#10;        &quot;                        \&quot;spotify\&quot;: \&quot;http://open.spotify.com/user/spotify__sverige\&quot;\n&quot; +&#10;        &quot;                    },\n&quot; +&#10;        &quot;                    \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotify__sverige\&quot;,\n&quot; +&#10;        &quot;                    \&quot;id\&quot;: \&quot;spotify__sverige\&quot;,\n&quot; +&#10;        &quot;                    \&quot;type\&quot;: \&quot;user\&quot;,\n&quot; +&#10;        &quot;                    \&quot;uri\&quot;: \&quot;spotify:user:spotify__sverige\&quot;\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;public\&quot;: null,\n&quot; +&#10;        &quot;                \&quot;snapshot_id\&quot;: \&quot;0j9Rcbt2KtCXEXKtKy/tnSL5r4byjDBOIVY1dn4S6GV73EEUgNuK2hU+QyDuNnXz\&quot;,\n&quot; +&#10;        &quot;                \&quot;tracks\&quot;: {\n&quot; +&#10;        &quot;                    \&quot;href\&quot;: \&quot;https://api.spotify.com/v1/users/spotify__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO/tracks\&quot;,\n&quot; +&#10;        &quot;                    \&quot;total\&quot;: 38\n&quot; +&#10;        &quot;                },\n&quot; +&#10;        &quot;                \&quot;type\&quot;: \&quot;playlist\&quot;,\n&quot; +&#10;        &quot;                \&quot;uri\&quot;: \&quot;spotify:user:spotify__sverige:playlist:4uOEx4OUrkoGNZoIlWMUbO\&quot;\n&quot; +&#10;        &quot;            }\n&quot; +&#10;        &quot;        ],\n&quot; +&#10;        &quot;        \&quot;limit\&quot;: 20,\n&quot; +&#10;        &quot;        \&quot;next\&quot;: null,\n&quot; +&#10;        &quot;        \&quot;offset\&quot;: 0,\n&quot; +&#10;        &quot;        \&quot;previous\&quot;: null,\n&quot; +&#10;        &quot;        \&quot;total\&quot;: 2\n&quot; +&#10;        &quot;    }\n&quot; +&#10;        &quot;}&quot;.replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;&#10;    private String[] arguments = new String[]{&#10;        &quot;-access&quot;,&#10;        accessServerUrl,&#10;        &quot;-resource&quot;,&#10;        resourceServerUrl,&#10;        &quot;-page&quot;,&#10;        &quot;1&quot;&#10;    };&#10;&#10;    private WebServerMock accessServer = new WebServerMock(accessServerPort)&#10;        .setPage(&quot;/api/token&quot;, tokenResponse);&#10;&#10;    private WebServerMock resourceServer = new WebServerMock(resourceServerPort)&#10;        .setPage(&quot;/v1/browse/categories&quot;, apiCategoriesResponse)&#10;        .setPage(&quot;/v1/browse/categories/party/playlists&quot;, apiPlaylistsPartyResponse)&#10;        .setPage(&quot;/v1/browse/new-releases&quot;, apiNewReleasesResponse)&#10;        .setPage(&quot;/v1/browse/featured-playlists&quot;, apiFeaturedPlaylistsResponse);&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;Attach&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\nexit&quot;)&#10;                .addArguments(arguments)&#10;                .runWith(accessServer)&#10;                .runWith(resourceServer)&#10;                .setAttach(new Attach(reply -&gt; {&#10;                    if (!reply.contains(&quot;Success!&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;There is no \&quot;Success!\&quot; after \&quot;auth\&quot; but should be&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;new\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;                    if (!reply.strip().startsWith(&quot;Please, provide access for application.&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;When no access provided you should output &quot; +&#10;                                &quot;\&quot;Please, provide access for application.\&quot;&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;featured\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;                    if (!reply.strip().startsWith(&quot;Please, provide access for application.&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;When no access provided you should output &quot; +&#10;                                &quot;\&quot;Please, provide access for application.\&quot;&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;categories\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;                    if (!reply.strip().startsWith(&quot;Please, provide access for application.&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;When no access provided you should output &quot; +&#10;                                &quot;\&quot;Please, provide access for application.\&quot;&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;playlists Party Time\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;                    if (!reply.strip().startsWith(&quot;Please, provide access for application.&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;When no access provided you should output &quot; +&#10;                                &quot;\&quot;Please, provide access for application.\&quot;&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\nnew\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;&#10;                    String album1 =&#10;                        &quot;Runnin'\n&quot; +&#10;                            &quot;[Drake]\n&quot; +&#10;                            &quot;https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    String album2 =&#10;                        &quot;Sneakin’\n&quot; +&#10;                            &quot;[Drake2]\n&quot; +&#10;                            &quot;https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    if (!reply.contains(&quot;---PAGE 1 of 2---&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;Something wrong with pagination format&quot;);&#10;                    }&#10;&#10;                    if (!reply.contains(album1) || reply.contains(album2)) {&#10;                        return new CheckResult(false,&#10;                            &quot;Album from page 2 appeared on page 1 on \&quot;new\&quot; action&quot;);&#10;                    }&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\nnew\nnext\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;&#10;                    String album1 =&#10;                        &quot;Runnin'\n&quot; +&#10;                            &quot;[Drake]\n&quot; +&#10;                            &quot;https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    String album2 =&#10;                        &quot;Sneakin’\n&quot; +&#10;                            &quot;[Drake2]\n&quot; +&#10;                            &quot;https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    if (!reply.contains(&quot;---PAGE 1 of 2---&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;Something wrong with pagination format&quot;);&#10;                    }&#10;&#10;                    if (!reply.contains(&quot;---PAGE 2 of 2---&quot;)) {&#10;                        return new CheckResult(false,&#10;                            &quot;Something wrong with pagination format&quot;);&#10;                    }&#10;&#10;                    if (!reply.contains(album1) || !reply.contains(album2)) {&#10;                        return new CheckResult(false,&#10;                            &quot;Album from page 2 appeared on page 1 on \&quot;new\&quot; action&quot;);&#10;                    }&#10;&#10;                    if (countAppearances(reply, album1) &gt; 1&#10;                        || countAppearances(reply, album2) &gt; 1) {&#10;&#10;                        return new CheckResult(false,&#10;                            &quot;Album appeared twice on first page and on second page on \&quot;new\&quot; action&quot;);&#10;                    }&#10;&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\nnew\nnext\nprev\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;&#10;                    String album1 =&#10;                        &quot;Runnin'\n&quot; +&#10;                            &quot;[Drake]\n&quot; +&#10;                            &quot;https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    String album2 =&#10;                        &quot;Sneakin’\n&quot; +&#10;                            &quot;[Drake2]\n&quot; +&#10;                            &quot;https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    if (countAppearances(reply, album1) != 2) {&#10;                        return new CheckResult(false,&#10;                            &quot;Album from the first page should appear &quot; +&#10;                                &quot;twice on \&quot;new\&quot;, \&quot;next\&quot;, \&quot;prev\&quot; sequence&quot;);&#10;                    }&#10;&#10;                    if (countAppearances(reply, album2) != 1) {&#10;                        return new CheckResult(false,&#10;                            &quot;Album from the second page should appear &quot; +&#10;                                &quot;once on \&quot;new\&quot;, \&quot;next\&quot;, \&quot;prev\&quot; sequence&quot;);&#10;                    }&#10;&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\ncategories\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;&#10;                    String category1 = &quot;Top Lists&quot;;&#10;                    String category2 = &quot;Super Mood&quot;;&#10;                    String category3 = &quot;Party Time&quot;;&#10;&#10;                    if (countAppearances(reply, category1) != 1&#10;                        || countAppearances(reply, category2) != 0&#10;                        || countAppearances(reply, category3) != 0) {&#10;&#10;                        return new CheckResult(false,&#10;                            &quot;Something wrong with showing categories and pages&quot;);&#10;                    }&#10;&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\ncategories\nnext\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;&#10;                    String category1 = &quot;Top Lists&quot;;&#10;                    String category2 = &quot;Super Mood&quot;;&#10;                    String category3 = &quot;Party Time&quot;;&#10;&#10;                    if (countAppearances(reply, category1) != 1&#10;                        || countAppearances(reply, category2) != 1&#10;                        || countAppearances(reply, category3) != 0) {&#10;&#10;                        return new CheckResult(false,&#10;                            &quot;Something wrong with showing categories and pages&quot;);&#10;                    }&#10;&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\ncategories\nnext\nnext\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;&#10;                    String category1 = &quot;Top Lists&quot;;&#10;                    String category2 = &quot;Super Mood&quot;;&#10;                    String category3 = &quot;Party Time&quot;;&#10;&#10;                    if (countAppearances(reply, category1) != 1&#10;                        || countAppearances(reply, category2) != 1&#10;                        || countAppearances(reply, category3) != 1) {&#10;&#10;                        return new CheckResult(false,&#10;                            &quot;Something wrong with showing categories and pages&quot;);&#10;                    }&#10;&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\ncategories\nnext\nnext\nprev\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;&#10;                    String category1 = &quot;Top Lists&quot;;&#10;                    String category2 = &quot;Super Mood&quot;;&#10;                    String category3 = &quot;Party Time&quot;;&#10;&#10;                    if (countAppearances(reply, category1) != 1&#10;                        || countAppearances(reply, category2) != 2&#10;                        || countAppearances(reply, category3) != 1) {&#10;&#10;                        return new CheckResult(false,&#10;                            &quot;Something wrong with showing categories and pages&quot;);&#10;                    }&#10;&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\ncategories\nnext\nnext\nprev\nprev\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;&#10;                    String category1 = &quot;Top Lists&quot;;&#10;                    String category2 = &quot;Super Mood&quot;;&#10;                    String category3 = &quot;Party Time&quot;;&#10;&#10;                    if (countAppearances(reply, category1) != 2&#10;                        || countAppearances(reply, category2) != 2&#10;                        || countAppearances(reply, category3) != 1) {&#10;&#10;                        return new CheckResult(false,&#10;                            &quot;Something wrong with showing categories and pages&quot;);&#10;                    }&#10;&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\nfeatured\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;&#10;                    String featured1 =&#10;                        &quot;Monday Morning Mood\n&quot; +&#10;                            &quot;http://open.spotify.com/user/spotify/playlist/6ftJBzU2LLQcaKefMi7ee7&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    String featured2 =&#10;                        &quot;Upp och hoppa!\n&quot; +&#10;                            &quot;http://open.spotify.com/user/spotify__sverige/playlist/4uOEx4OUrkoGNZoIlWMUbO&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;&#10;                    if (countAppearances(reply, featured1) != 1&#10;                        || countAppearances(reply, featured2) != 0) {&#10;&#10;                        return new CheckResult(false,&#10;                            &quot;Something wrong with showing featured playlists and pages&quot;);&#10;                    }&#10;&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\nfeatured\nnext\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;&#10;                    String featured1 =&#10;                        &quot;Monday Morning Mood\n&quot; +&#10;                            &quot;http://open.spotify.com/user/spotify/playlist/6ftJBzU2LLQcaKefMi7ee7&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    String featured2 =&#10;                        &quot;Upp och hoppa!\n&quot; +&#10;                            &quot;http://open.spotify.com/user/spotify__sverige/playlist/4uOEx4OUrkoGNZoIlWMUbO&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;&#10;                    if (countAppearances(reply, featured1) != 1&#10;                        || countAppearances(reply, featured2) != 1) {&#10;&#10;                        return new CheckResult(false,&#10;                            &quot;Something wrong with showing featured playlists and pages&quot;);&#10;                    }&#10;&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\nfeatured\nnext\nprev\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;&#10;                    String featured1 =&#10;                        &quot;Monday Morning Mood\n&quot; +&#10;                            &quot;http://open.spotify.com/user/spotify/playlist/6ftJBzU2LLQcaKefMi7ee7&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    String featured2 =&#10;                        &quot;Upp och hoppa!\n&quot; +&#10;                            &quot;http://open.spotify.com/user/spotify__sverige/playlist/4uOEx4OUrkoGNZoIlWMUbO&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;&#10;                    if (countAppearances(reply, featured1) != 2&#10;                        || countAppearances(reply, featured2) != 1) {&#10;&#10;                        return new CheckResult(false,&#10;                            &quot;Something wrong with showing featured playlists and pages&quot;);&#10;                    }&#10;&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\nplaylists Party Time\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;&#10;                    String playlist1 =&#10;                        &quot;Noite Eletrônica\n&quot; +&#10;                            &quot;http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    String playlist2 =&#10;                        &quot;Festa Indie\n&quot; +&#10;                            &quot;http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    if (countAppearances(reply, playlist1) != 1&#10;                        || countAppearances(reply, playlist2) != 0) {&#10;&#10;                        return new CheckResult(false,&#10;                            &quot;Something wrong with showing playlists and pages&quot;);&#10;                    }&#10;&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\nplaylists Party Time\nnext\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;&#10;                    String playlist1 =&#10;                        &quot;Noite Eletrônica\n&quot; +&#10;                            &quot;http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    String playlist2 =&#10;                        &quot;Festa Indie\n&quot; +&#10;                            &quot;http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    if (countAppearances(reply, playlist1) != 1&#10;                        || countAppearances(reply, playlist2) != 1) {&#10;&#10;                        return new CheckResult(false,&#10;                            &quot;Something wrong with showing playlists and pages&quot;);&#10;                    }&#10;&#10;                    return CheckResult.TRUE;&#10;                })),&#10;&#10;            new TestCase&lt;Attach&gt;()&#10;                .setInput(&quot;auth\nplaylists Party Time\nnext\nprev\nexit&quot;)&#10;                .setAttach(new Attach(reply -&gt; {&#10;&#10;                    String playlist1 =&#10;                        &quot;Noite Eletrônica\n&quot; +&#10;                            &quot;http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    String playlist2 =&#10;                        &quot;Festa Indie\n&quot; +&#10;                            &quot;http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770&quot;&#10;                                .replaceAll(spotifyServerUrl, resourceServerUrl);&#10;&#10;                    if (countAppearances(reply, playlist1) != 2&#10;                        || countAppearances(reply, playlist2) != 1) {&#10;&#10;                        return new CheckResult(false,&#10;                            &quot;Something wrong with showing playlists and pages&quot;);&#10;                    }&#10;&#10;                    return CheckResult.TRUE;&#10;                }))&#10;&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, Attach clue) {&#10;        return clue.func.apply(reply);&#10;    }&#10;}&#10;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/Main.java" />
                                <option name="text" value="package advisor;&#10;&#10;import advisor.manager.CommandManager;&#10;&#10;import java.io.FileInputStream;&#10;import java.io.FileNotFoundException;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.net.URL;&#10;import java.util.Arrays;&#10;import java.util.Properties;&#10;import java.util.Scanner;&#10;&#10;public class Main {&#10;&#10;    CommandManager commandManager;&#10;    Properties appConfig;&#10;&#10;    public Main() {&#10;        Scanner scanner = new Scanner(System.in);&#10;        this.commandManager = new CommandManager(scanner);&#10;        //this.appConfig = loadConfig();&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        Main application = new Main();&#10;        application.start();&#10;    }&#10;&#10;    public void start() {&#10;        commandManager.executeLine();&#10;    }&#10;&#10;    private Properties loadConfig() {&#10;        Properties appConfig = new Properties();&#10;        try {&#10;            // load the properties file using load() and an input stream&#10;            //FileInputStream in = new FileInputStream(&quot;resources/config.properties&quot;);&#10;            ClassLoader classLoader = getClass().getClassLoader();&#10;            URL resource = classLoader.getResource(&quot;/Music Advisor/task/src/advisor/config.properties&quot;);&#10;&#10;            System.out.println(resource);&#10;            System.out.println(&quot;----------------------------&quot;);&#10;&#10;            InputStream in = getClass()&#10;                    .getClassLoader().getResourceAsStream(&quot;/config.properties&quot;);&#10;            appConfig.load(in);&#10;            in.close();&#10;&#10;            appConfig.list(System.out);&#10;&#10;&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;&#10;        return appConfig;&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="build.gradle">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="build.gradle" />
                                <option name="text" value="apply plugin: 'java'&#10;apply plugin: 'application'&#10;&#10;group 'advisor'&#10;version '1.0-SNAPSHOT'&#10;&#10;sourceCompatibility = 11&#10;mainClassName = 'advisor.Main'&#10;&#10;repositories {&#10;    mavenCentral()&#10;}&#10;&#10;dependencies {&#10;    compile 'com.google.code.gson:gson:+'&#10;}&#10;&#10;jar {&#10;    manifest {&#10;        attributes 'Main-Class' : 'advisor.Main'&#10;    }&#10;    from {&#10;        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/manager/CommandManager.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/manager/CommandManager.java" />
                                <option name="text" value="package advisor.manager;&#10;&#10;import advisor.command.Command;&#10;import advisor.command.CommandFactory;&#10;import advisor.exception.InvalidInputException;&#10;import advisor.service.SpotifyService;&#10;&#10;import java.util.Scanner;&#10;&#10;public class CommandManager {&#10;&#10;    CommandFactory commandFactory;&#10;    Scanner scanner;&#10;    boolean getNextLine = true;&#10;&#10;    boolean userLogged = false;&#10;&#10;    public CommandManager(Scanner scanner) {&#10;        this.scanner = scanner;&#10;        this.commandFactory = new CommandFactory();&#10;    }&#10;&#10;    public void executeLine()&#10;    {&#10;        String nextLine = getNextLine();&#10;        if (!nextLine.isEmpty()) {&#10;&#10;            try {&#10;                startCommand(nextLine);&#10;            } catch (Exception e) {&#10;                System.out.println(e.getMessage());&#10;&#10;            }&#10;        }&#10;&#10;        if (getNextLine) {&#10;            executeLine();&#10;        }&#10;    }&#10;&#10;    private void startCommand(String line) throws InvalidInputException {&#10;        Command command = commandFactory.getCommand(line);&#10;        if (!command.isLoginRequired() || (command.isLoginRequired() &amp;&amp; SpotifyService.isUserLogged())) {&#10;            command.handle();&#10;        }&#10;        else {&#10;            System.out.println(&quot;Please, provide access for application.&quot;);&#10;        }&#10;&#10;        if (command.isExitCommand()) {&#10;            getNextLine = false;&#10;        }&#10;    }&#10;&#10;    private String getNextLine() {&#10;        return scanner.nextLine();&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/HelpCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/HelpCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class HelpCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String helpMessage = &quot;The program calculates the sum of numbers //n - calculator support the addition + and subtraction - operators&quot;;&#10;&#10;    @Override&#10;    public void handle() {&#10;        System.out.println(helpMessage);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/Command.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/Command.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public abstract class Command {&#10;&#10;    protected boolean exitCommand = false;&#10;&#10;    protected boolean loginRequired = true;&#10;&#10;    public abstract void handle();&#10;&#10;    public boolean isLoginRequired() {&#10;        return loginRequired;&#10;    }&#10;&#10;    public boolean isExitCommand() {&#10;        return exitCommand;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/ExitCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/ExitCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class ExitCommand extends Command{&#10;&#10;    public ExitCommand() {&#10;        this.exitCommand = true;&#10;    }&#10;&#10;    @Override&#10;    public void handle() {&#10;        System.out.println(&quot;---GOODBYE!---&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/CommandFactory.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/CommandFactory.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;import advisor.exception.InvalidInputException;&#10;&#10;public class CommandFactory {&#10;&#10;    private final String unknownMessage = &quot;Unknown command&quot;;&#10;    private final String missingParameterMessage = &quot;Missing Parameter&quot;;&#10;&#10;    private final String playlistsCommand = &quot;playlists&quot;;&#10;    private final String newCommand = &quot;new&quot;;&#10;    private final String featuredCommand = &quot;featured&quot;;&#10;    private final String categoriesCommand = &quot;categories&quot;;&#10;    private final String helpCommand = &quot;help&quot;;&#10;    private final String stopCommand = &quot;exit&quot;;&#10;    private final String authCommand = &quot;auth&quot;;&#10;&#10;    public Command getCommand(String commandLine) throws InvalidInputException {&#10;&#10;        String[] parts = commandLine.split(&quot;\\s&quot;, 2);&#10;        String textCommand = parts[0];&#10;&#10;        String parameters = null;&#10;        if (parts.length &gt; 1 ) {&#10;            parameters = parts[1];&#10;        }&#10;&#10;        Command command;&#10;        switch (textCommand) {&#10;            case helpCommand:&#10;                command = new HelpCommand();&#10;                break;&#10;            case stopCommand:&#10;                command = new ExitCommand();&#10;                break;&#10;            case featuredCommand:&#10;                command = new FeaturedCommand();&#10;                break;&#10;            case newCommand:&#10;                command = new NewCommand();&#10;                break;&#10;            case categoriesCommand:&#10;                command = new CategoriesCommand();&#10;                break;&#10;            case authCommand:&#10;                command = new AuthCommand();&#10;                break;&#10;            case playlistsCommand:&#10;                if (parameters == null) {&#10;                    throw new InvalidInputException(missingParameterMessage);&#10;                }&#10;                command = new PlaylistsCommand(parameters);&#10;                break;&#10;            default:&#10;                throw new InvalidInputException(unknownMessage + &quot; &quot; + textCommand);&#10;        }&#10;&#10;&#10;        return command;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/exception/InvalidInputException.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/exception/InvalidInputException.java" />
                                <option name="text" value="package advisor.exception;&#10;&#10;public class InvalidInputException extends Exception {&#10;&#10;    public InvalidInputException(String errorMessage) {&#10;        super(errorMessage);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/FeaturedCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/FeaturedCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class FeaturedCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String title = &quot;---FEATURED---&quot;;&#10;    private String message = &quot;Mellow Morning\n&quot; +&#10;            &quot;Wake Up and Smell the Coffee\n&quot; +&#10;            &quot;Monday Motivation\n&quot; +&#10;            &quot;Songs to Sing in the Shower&quot;;&#10;&#10;    @Override&#10;    public void handle() {&#10;&#10;        System.out.println(title);&#10;&#10;        System.out.println(message);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/NewCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/NewCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class NewCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String title = &quot;---NEW RELEASES---&quot;;&#10;    private String message = &quot;Mountains [Sia, Diplo, Labrinth]\n&quot; +&#10;            &quot;Runaway [Lil Peep]\n&quot; +&#10;            &quot;The Greatest Show [Panic! At The Disco]\n&quot; +&#10;            &quot;All Out Life [Slipknot]&quot;;&#10;&#10;    @Override&#10;    public void handle() {&#10;&#10;        System.out.println(title);&#10;        System.out.println(message);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/CategoriesCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/CategoriesCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class CategoriesCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String title = &quot;---CATEGORIES---&quot;;&#10;    private String message =  &quot;Top Lists\n&quot; +&#10;            &quot;Pop\n&quot; +&#10;            &quot;Mood\n&quot; +&#10;            &quot;Latin&quot;;&#10;&#10;    @Override&#10;    public void handle() {&#10;&#10;        System.out.println(title);&#10;        System.out.println(message);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/PlaylistsCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/PlaylistsCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;public class PlaylistsCommand extends Command{&#10;&#10;//    static {&#10;//        name = &quot;/help&quot;;&#10;//    }&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private String categoryName;&#10;&#10;    private String title = &quot;---C_NAME PLAYLISTS---&quot;;&#10;    private String message =  &quot;Mountains [Sia, Diplo, Labrinth]\n&quot; +&#10;            &quot;Runaway [Lil Peep]\n&quot; +&#10;            &quot;The Greatest Show [Panic! At The Disco]\n&quot; +&#10;            &quot;All Out Life [Slipknot]&quot;;&#10;&#10;&#10;    public PlaylistsCommand(String parametersString) {&#10;        this.categoryName = parametersString;&#10;        title = title.replaceAll(&quot;C_NAME&quot;, this.categoryName.toUpperCase());&#10;    }&#10;&#10;    @Override&#10;    public void handle() {&#10;&#10;        System.out.println(title);&#10;        System.out.println(message);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/command/AuthCommand.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/command/AuthCommand.java" />
                                <option name="text" value="package advisor.command;&#10;&#10;import advisor.service.SpotifyService;&#10;&#10;public class AuthCommand extends Command{&#10;&#10;//    protected static String name = &quot;/help&quot;;&#10;&#10;    private SpotifyService spotifyService;&#10;&#10;    private String title = &quot;&quot;;&#10;    private String message =  &quot;&quot;;&#10;&#10;    public AuthCommand() {&#10;        this.loginRequired = false;&#10;        spotifyService = new SpotifyService();&#10;    }&#10;&#10;    @Override&#10;    public void handle() {&#10;&#10;        System.out.println(spotifyService.getAuthorizationUrl());&#10;        System.out.println(&quot;---SUCCESS---&quot;);&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/service/SpotifyService.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/service/SpotifyService.java" />
                                <option name="text" value="package advisor.service;&#10;&#10;public class SpotifyService {&#10;&#10;    private static String redirect_uri = &quot;https://www.example.com&amp;response_type=code&quot;;&#10;    private static String uri = &quot;https://accounts.spotify.com/authorize?&quot;;&#10;    private static String client_id = &quot;3c1f0675fb224be6807fdd578f1d84cb&quot;;&#10;    private static String client_secret = &quot;97cdf492b8934099a263ddd75f02d3ca&quot;;&#10;&#10;&#10;    private static boolean userLogged = false;&#10;&#10;    public static boolean isUserLogged() {&#10;        return userLogged;&#10;    }&#10;&#10;    public String getAuthorizationUrl() {&#10;&#10;        StringBuilder authUrl = new StringBuilder();&#10;        authUrl.append(uri)&#10;                .append(&quot;client_id=&quot;).append(client_id)&#10;                .append(&quot;&amp;&quot;).append(&quot;redirect_uri=&quot;).append(redirect_uri);&#10;&#10;        //for now change flag right after gen auth link&#10;        userLogged = true;&#10;&#10;        return authUrl.toString();&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/resources/config.properties">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/resources/config.properties" />
                                <option name="text" value="service.spotify.url = https://accounts.spotify.com/authorize?&#10;service.spotify.redirect_uri = https://www.example.com&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/resources/config.properties">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/resources/config.properties" />
                                <option name="text" value="service.spotify.url = https://accounts.spotify.com/authorize?&#10;service.spotify.redirect_uri = https://www.example.com&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/advisor/config.properties">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/advisor/config.properties" />
                                <option name="text" value="service.spotify.url = https://accounts.spotify.com/authorize?&#10;service.spotify.redirect_uri = https://www.example.com&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1561937182000" />
                    </EduTask>
                  </list>
                </option>
              </FrameworkLesson>
            </list>
          </option>
        </HyperskillCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>